<?php
// $Id: lightbox2.module,v 1.16.2.16.2.147 2009/01/08 12:34:25 snpower Exp $

/**
 * @file
 * Enables the use of lightbox2 which places images above your current page,
 * not within. This frees you from the constraints of the layout,
 * particularly column widths.
 *
 * This module is for Drupal 6.x only.
 *
 * Module by: Mark Ashmead
 * Mailto: bugzie@gmail.com
 * Co-maintainer: Stella Power (http://drupal.org/user/66894)
 *
 * Image Node Support: Steve McKenzie
 */

/**
 * Implementation of hook_help().
 */
function lightbox2_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Enables Lightbox2 for Drupal');
    case 'admin/help#lightbox2':
      return t('<h3>Overview</h3>
      <p align="justify">Lightbox2 JS is a simple, unobtrusive script used to overlay images on the current page. It\'s a snap to setup and works on all modern browsers. The module comes with a Lightbox2 Lite option which does not use the JQuery libraries; it is therefore less likely to conflict with anything else.</p>
      <p align="justify">Places images above your current page, not within. This frees you from the constraints of the layout, particularly column widths. Keeps users on the same page. Clicking to view an image and then having to click the back button to return to your site is bad for continuity (and no fun!).</p>
<h3>Features</h3>
The version 2 module has several benefits over the plain Lightbox module.  Note, not all of these features are available when the "Lightbox2 Lite" option is enabled.
<ul>
<li>Image Sets: group related images and navigate through them with ease - ideal for your image galleries.</li>
<li>Slideshow Capability: automatically transition between grouped images, includes play/pause and previous and next buttons.</li>
<li>HTML Content Support: ability to show websites or other HTML content in a lightbox.</li>
<li>Video Content Support: ability to show videos in a lightbox.</li>
<li>Visual Effects: fancy pre-loader and transition when you click on the image.</li>
<li>Keyboard Shortcuts: useful <a href="http://drupal.org/node/249827">keyboard shortcuts</a> for switching between images, toggling play / pause, etc.</li>
<li>Zoom Capability: larger images are reduced in size so they fit snugly inside the browser window.  A zoom button can then be clicked on to see it in its original size.</li>
<li>Automatic Image Detection: configurable automatic re-formatting of
image thumbnails, so there is no need to add \'rel="lightbox"\' to each
image link on your site.  <a
href="http://drupal.org/project/image">Image</a>, <a
href="http://drupal.org/project/inline">Inline</a>, <a
href="http://drupal.org/project/flickr">Flickr</a>, <a
href="http://drupal.org/project/img_assist">Image Assist</a> and <a
href="http://drupal.org/project/imagefield">CCK Imagefield</a> modules are all
supported.  It\'s also possible to configure a custom list of image classes
which should trigger the lightbox functionality.</li>
<li><a href="http://drupal.org/project/imagecache">Imagecache</a> Support: adds a Lightbox2 field formatter for <a href="http://drupal.org/project/imagefield">CCK imagefields</a> for your custom <a href="http://drupal.org/project/views">views</a>.</li>
<li>Image Page Link: a link to the image node can be provided within the lightbox itself.</li>
<li>Page Exclusion Capability: exclude certain pages on your site from having the lightbox2 functionality.</li>
<li>Login Support: ability to modify all user/login links so the login form appears in a lightbox.</li>
<li>Skin and Animation Configuration: configure the order and speed of the lightbox animations, along with the lightbox colors, border size and overlay opacity.</li>
<li>Gallery 2 Support: support for Gallery 2 images via the <a href="http://drupal.org/project/gallery">Gallery</a> module (beta).</li>
</ul>
<p align="justify"><h3>Usage</h3></p>
      <h5 style="text-decoration: underline;">Adding a Basic Lightbox</h5>
      <p>Add rel=&quot;lightbox&quot; attribute to any link tag to activate the lightbox. For example: </p>
      <p>&lt;a href=&quot;image-1.jpg&quot; rel=&quot;lightbox&quot;&gt;image #1&lt;/a&gt;</p>
      <p>&lt;a href=&quot;image-1.jpg&quot; rel=&quot;lightbox[][my caption]&quot;&gt;image #1&lt;/a&gt;</p>
      <p>Optional: To show a caption either use the title attribute or put in the second set of [] of the rel attribute.</p>
<h5 style="text-decoration: underline;">Grouping Images</h5>
   <p>If you have a set of related images that you would like to group, follow
   step one but additionally include a group name between square brackets in the
   rel attribute. For example:</p><p>&lt;a href="images/image-1.jpg"
   rel="lightbox[roadtrip]"&gt;image #1&lt;/a&gt;<br />
&lt;a href="images/image-2.jpg" rel="lightbox[roadtrip][caption 2]"&gt;image
#2&lt;/a&gt;<br />
&lt;a href="images/image-3.jpg" rel="lightbox[roadtrip][caption 3]"&gt;image
#3&lt;/a&gt;<br /></p>
<p>No limits to the number of image sets per page or how many images are allowed
in each set.</p>

<p>If you have a set of images that you would like to group together in a lightbox, but only wish for one of these images to be visible on your page, you can assign the "lightbox_hide_image" class to hide the additional images.  For example:</p>

<p>&lt;a href="images/image-1.jpg" rel="lightbox[roadtrip]"&gt;image #1&lt;/a&gt;<br />
&lt;a href="images/image-2.jpg" rel="lightbox[roadtrip]" class="lightbox_hide_image"&gt;image #2&lt;/a&gt;<br />
&lt;a href="images/image-3.jpg" rel="lightbox[roadtrip][caption 3]" class="lightbox_hide_image"&gt;image #3&lt;/a&gt;</p>

<h5 style="text-decoration: underline;">Slideshow</h5>
<p>This is very similar to the grouping functionality described above.  The only difference is that "rel" attribute should be set to "lightshow" instead of "lightbox".  Using the same example as above, we could launch the images in a slideshow by doing:</p>

<p>&lt;a href="images/image-1.jpg" rel="lightshow[roadtrip]"&gt;image #1&lt;/a&gt;<br />
&lt;a href="images/image-2.jpg" rel="lightshow[roadtrip][caption 2]"&gt;image #2&lt;/a&gt;<br />
&lt;a href="images/image-3.jpg" rel="lightshow[roadtrip][caption 3]"&gt;image #3&lt;/a&gt;</p>

<h5 style="text-decoration: underline;">Video Content</h5>
<p>
It\'s possible to show video content in the lightbox.  In this case the "rel" attribute should be set to <code>lightvideo</code>.  It\'s possible to group videos and to control the size of the lightbox by setting the \'width\' and \'height\' properties.  The properties can be configured like <code>lightvideo[group|width:300px; height: 200px;]</code> and <code>lightvideo[|width:300px; height: 200px;][my caption]</code>.  The properties should all be of the format "property: value;" - note the closing semi-colon.  If no properties are set, then the default width and height of 400px will be used.  See below for more detailed examples.</p>

<p>Basic example:<br />
<code>
&lt;a href="http://video.google.com/videoplay?docid=1811233136844420765" rel="lightvideo"&gt;Google video example - default size&lt;/a&gt;<br />
</code></p>

<p>Basic example with caption:<br />
<code>
&lt;a href="http://video.google.com/videoplay?docid=1811233136844420765" rel="lightvideo[][my caption]"&gt;Google video example - default size&lt;/a&gt;<br />
</code></p>

<p>Grouped example:<br />
<code>
&lt;a href="http://video.google.com/videoplay?docid=29023498723974239479" rel="lightvideo[group][my caption]"&gt;Grouped example 1&lt;/a&gt;<br />
&lt;a href="http://video.google.com/videoplay?docid=1811233136844420765" rel="lightvideo[group][my caption]"&gt;Grouped example 2&lt;/a&gt;<br />
</code></p>

<p>Controlling lightbox size example:<br />
<code>
&lt;a href="http://video.google.com/videoplay?docid=1811233136844420765" rel="lightvideo[|width:400px; height:300px;][my caption]"&gt;Google video example - custom size&lt;/a&gt;<br />
</code></p>

<p>Supported Video Formats<br />
asx, wmv, mov and swf videos should all be supported.  A number of video providers are also supported, for example YouTube and Google Video.  For full details on how to integrate these with lightbox, please see the online documentation.</p>

<h5 style="text-decoration: underline;">HTML Content</h5>
<p>It\'s possible to show webpage content in the lightbox, using iframes.  In this case the "rel" attribute should be set to <code>lightframe</code>.  Again it\'s possible to group the items, (e.g. <code>lightframe[search]</code>) but in addition to that, it\'s possible to control some of the iframe properties.  It\'s possible to set the \'width\', \'height\' and \'scrolling\' properties of the iframe.  The properties are separated from the group name by a <code>|</code>, for example <code>lightframe[search|width:100px;]</code> and <code>lightframe[search|width:120px][my caption]</code>.  If no grouping is being used, then the <code>|</code> is still used and the format would be <code>lightframe[|width:100px;]</code>.  The properties should all be of the format "property: value;" - note the closing semi-colon.  If no iframe properties are set, then the default width and height of 400px will be used.  See below for more detailed examples.</p>

<p>Basic example:<br />
<code>
&lt;a href="http://www.google.com" rel="lightframe[][Search Google]"&gt;Search google&lt;/a&gt;
</code></p>

<p>Grouped example:<br />
<code>
&lt;a href="http://www.google.com" rel="lightframe[search]"&gt;Search google&lt;/a&gt;<br />
&lt;a href="http://www.yahoo.com" rel="lightframe[search][Search Yahoo]"&gt;Search yahoo&lt;/a&gt;
</code></p>

<p>Controlling iframe property example:<br />
<code>
&lt;a href="http://www.google.com" rel="lightframe[|width:400px; height:300px; scrolling: auto;]"&gt;Search google&lt;/a&gt;
</code></p>

<p>Controlling iframe property when grouped example:<br />
<code>
&lt;a href="http://www.google.com" rel="lightframe[search|width:400px; height:300px; scrolling: auto;]"&gt;Search google&lt;/a&gt;<br />
&lt;a href="http://www.yahoo.com" rel="lightframe[search|width:400px; height:300px;][Search Yahoo]"&gt;Search yahoo&lt;/a&gt;
</code></p>

<h5 style="text-decoration: underline;">Inline Content Support</h5>
<p>It\'s possible to show HTML snippets in the lightbox, that is on the same domain.  In this case the "rel" attribute should be set to <code>lightmodal</code>.  Again it\'s possible to group the content, (e.g. <code>lightmodal[search]</code>) but in addition to that, it\'s possible to control some of the inline / modal properties.  It\'s possible to set the \'width\', \'height\' and \'scrolling\' properties of the inline content.  The properties are separated from the group name by a <code>|</code>, for example <code>lightmodal[search|width:100px;]</code> and <code>lightmodal[search|width:100px;][my caption]</code>.  If no grouping is being used, then the <code>|</code> is still used and the format would be <code>lightmodal[|width:100px;]</code>.  The properties should all be of the format "property: value;" - note the closing semi-colon.  If no properties are set, then the default width and height of 400px will be used. See below for more detailed examples.</p>

<p>Basic example:<br />
<code>
&lt;a href="search.php" rel="lightmodal"&gt;Search&lt;/a&gt;
</code></p>

<p>Basic example with caption:<br />
<code>
&lt;a href="search.php" rel="lightmodal[][my caption]"&gt;Search&lt;/a&gt;
</code></p>

<p>Grouped example:<br />
<code>
&lt;a href="search.php" rel="lightmodal[search]"&gt;Search&lt;/a&gt;<br />
&lt;a href="search.php?status=1" rel="lightmodal[search][published]"&gt;Search published content&lt;/a&gt;
</code></p>

<p>Controlling modal property example:<br />
<code>
&lt;a href="search.php" rel="lightmodal[|width:400px; height:300px; scrolling: auto;]"&gt;Search&lt;/a&gt;
</code></p>

<p>Controlling modal property when grouped example:<br />
<code>
&lt;a href="search.php" rel="lightmodal[search|width:400px; height:300px; scrolling: auto;]"&gt;Search&lt;/a&gt;<br />
&lt;a href="search.php?status=1" rel="lightmodal[search|width:400px; height:300px;][Search published]"&gt;Search published content&lt;/a&gt;<br />
&lt;a href="search.php?status=0" rel="lightmodal[search|width:400px; height:300px;][Search Unpublished]"&gt;Search unpublished content&lt;/a&gt;
</code></p>


<h3>Keyboard Shortcuts</h3>
<p>The default keyboard shortcuts are listed below.  You can override these on the admin page.</a>

<table border=0>
<tr><td>Close Lightbox</td><td>x</td></tr>
<tr><td></td><td>o</td></tr>
<tr><td></td><td>c</td></tr>
<tr><td></td><td>ESC</td></tr>

<tr><td>Previous Image</td><td>p</td></tr>
<tr><td></td><td>Left Arrow</td></tr>

<tr><td>Next Image</td><td>n</td></tr>
<tr><td></td><td>Right Arrow</td></tr>

<tr><td>Toggle Zoom</td><td>z (not available in slideshow)</td></tr>

<tr><td>Toggle Play / Pause</td><td>Spacebar (slideshow only)</td></tr>
</table>

<p>Not all of the keyboard shortcuts work in the Opera browser, for example "z" for toggling the zoom and "spacebar" for toggling play / pause in slideshows.  This can be overcome by updating your shortcut settings in the Opera preferences editor.</p>
');
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function lightbox2_perm() {
  return array('administer lightbox2', 'download original image');
}


/**
 * Implementation of hook_menu().
 */
function lightbox2_menu() {
  $items = array();

  $items['admin/settings/lightbox2'] = array(
    'title' => 'Lightbox2',
    'description' => 'Allows the user to configure the lightbox2 settings',
    'file' => 'lightbox2.admin.inc',
    'page callback' => 'lightbox2_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer lightbox2'),
  );
  $items['admin/settings/lightbox2/general'] = array(
    'title' => 'General',
    'description' => 'Allows the user to configure the lightbox2 settings',
    'file' => 'lightbox2.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightbox2_general_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer lightbox2'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/settings/lightbox2/slideshow'] = array(
    'title' => 'Slideshow',
    'description' => 'Allows the user to configure the lightbox2 slideshow functionality',
    'file' => 'lightbox2.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightbox2_slideshow_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer lightbox2'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/lightbox2/html_content'] = array(
    'title' => 'HTML Content',
    'file' => 'lightbox2.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightbox2_iframe_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer lightbox2'),
    'description' => 'Allows the user to configure the lightbox2 HTML content functionality.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/settings/lightbox2/automatic'] = array(
    'title' => 'Automatic image handling',
    'description' => 'Allows the user to configure the lightbox2 automatic image handling settings',
    'file' => 'lightbox2.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightbox2_auto_image_handling_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer lightbox2'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  if (module_exists('emfield') && module_exists('emvideo')) {
    $items['video-cck/lightbox2'] = array(
      'page callback' => 'lightbox2_emvideo',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }
  if (module_exists('acidfree') && module_exists('video')) {
    $items['node/%nid/lightframevideo'] = array(
      'page callback' => 'lightbox2_acidfree_video',
      'page arguments' => array(1),
      'access callback' => 'user_access',
      'access arguments' => array('play video'),
      'type' => MENU_CALLBACK,
    );
  }
  $items['user/login/lightbox2'] = array(
    'title' => 'Login',
    'page callback' => 'lightbox2_login',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  $items['contact/lightbox2'] = array(
    'title' => 'Contact',
    'page callback' => 'lightbox2_contact',
    'access arguments' => array('access site-wide contact form'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function lightbox2_init() {
  if (lightbox2_exclude_these_paths() != 1) {
    lightbox2_add_files();
  }
}


/**
 * Implementation of hook_filter_tips().
 */
function lightbox2_filter_tips($delta, $format, $long = FALSE) {
  if ($delta == 0) {
    if (!$long) {
      return t('Image links with \'rel="lightbox"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
    }
    else {
      $output = '<p>'. t('To add a lightbox to your images, add rel="lightbox" attribute to any link tag to activate the lightbox. For example:') .'</p>';
      $output .= '<p>'. t('<code>&lt;a href="image-1.jpg" rel="lightbox"&gt;image #1&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('<code>&lt;a href="image-1.jpg" rel="lightbox[][my caption]"&gt;image #1&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('To show a caption either use the title attribute or put in the second set of square brackets of the rel attribute.') .'</p>';
      $output .= '<p>'. t('If you have a set of related images that you would like to group, then you will need to include a group name between square brackets in the rel attribute. For example:') .'</p>';
      $output .= '<p>'. t('<code>&lt;a href="image-1.jpg" rel="lightbox[roadtrip]"&gt;image #1&lt;/a&gt;<br /> &lt;a href="image-2.jpg" rel="lightbox[roadtrip][caption 2]"&gt;image #2&lt;/a&gt;<br /> &lt;a href="image-3.jpg" rel="lightbox[roadtrip][caption 3]"&gt;image #3&lt;/a&gt;<br /> </code>') .'</p>';
      $output .= '<p>'. t('There are no limits to the number of image sets per page or how many images are allowed in each set.') .'</p>';
      $output .= '<p>'. t('If you wish to turn the caption into a link, format your caption in the following way:') .'</p>';
      $output .= '<p>'. t('<code>&lt;a href="image-1.jpg" rel=\'lightbox[][&lt;a href="http://www.yourlink.com"&gt;View Image Details&lt;/a&gt;]\' &gt;image #1&lt;/a&gt;</code>') .'</p>';
      return $output;
    }
  }
  elseif ($delta == 1) {
    return t('Image links from G2 are formatted for use with Lightbox2');
  }
  elseif ($delta == 2) {
    if (!$long) {
      return t('Image links with \'rel="lightshow"\' in the &lt;a&gt; tag will appear in a Lightbox slideshow when clicked on.');
    }
    else {
      $output = '<p>'. t('To add a lightbox slideshow to your images, add rel="lightshow[slideshowname][slide caption]" attribute to any link tag to activate the slideshow. For example:') .'</p>';
      $output .= '<p>'. t('<code>&lt;a href="image-1.jpg" rel="lightshow[show1]"&gt;image #1&lt;/a&gt;<br /> &lt;a href="image-2.jpg" rel="lightshow[show1]"&gt;image #2&lt;/a&gt;<br /> &lt;a href="image-3.jpg" rel="lightshow[show1]"&gt;image #3&lt;/a&gt;<br /> </code>') .'</p>';
      $output .= '<p>'. t('The title attribute in the link tag is optional. The addition of this attribute enables the display of a caption with the image displayed in the lightbox.') .'</p>';
      $output .= '<p>'. t('There are no limits to the number of slideshow image sets per page or how many images are allowed in each slideshow.') .'</p>';
      $output .= '<p>'. t('If you wish to turn the caption into a link, format your caption in the following way:') .'</p>';
      $output .= '<p>'. t('<code>&lt;a href="image-1.jpg" rel=\'lightshow[show1][&lt;a href="http://www.yourlink.com"&gt;View Image Details&lt;/a&gt;]\'&gt;image #1&lt;/a&gt;</code>') .'</p>';
      return $output;
    }
  }
  elseif ($delta == 3) {
    if (!$long) {
      return t('Links to HTML content with \'rel="lightframe"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
    }
    else {
      $output = '<p>'. t('It\'s possible to show webpage content in the lightbox, using iframes.  In this case the "rel" attribute should be set to "lightframe".  Again it\'s possible to group the content, (e.g. <code>lightframe[search][caption]</code>) but in addition to that, it\'s possible to control some of the iframe properties.  It\'s possible to set the "width", "height" and "scrolling" properties of the iframe.  The properties are separated from the group name by a <code>|</code>, for example <code>lightframe[search|width:100px;][caption]</code>.  If no grouping is being used, then the <code>|</code> is still used and the format would be <code>lightframe[|width:100px;]</code>.  The properties should all be of the format "property: value;" - note the closing semi-colon.  If no iframe properties are set, then the default width and height of 400px will be used.  See below for more detailed examples.') .'</p>';
      $output .= '<p>'. t('Basic example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;http://www.google.com&quot; rel=&quot;lightframe&quot;&gt;Search google&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('Grouped example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;http://www.google.com&quot; rel=&quot;lightframe[search][caption]&quot;&gt;Search google&lt;/a&gt;<br />&lt;a href=&quot;http://www.yahoo.com&quot; rel=&quot;lightframe[search]&quot;&gt;Search yahoo&lt;/a&gt;</code>') .'</p>';

      $output .= '<p>'. t('Controlling iframe property example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;http://www.google.com&quot; rel=&quot;lightframe[|width:400px; height:300px; scrolling: auto;][caption]&quot;&gt;Search google&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('Controlling iframe property when grouped example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;http://www.google.com&quot; rel=&quot;lightframe[search|width:400px; height:300px; scrolling: auto;]&quot;&gt;Search google&lt;/a&gt;<br />&lt;a href=&quot;http://www.yahoo.com&quot; rel=&quot;lightframe[search|width:400px; height:300px;]&quot;&gt;Search yahoo&lt;/a&gt;</code>') .'</p>';

      return $output;
    }
  }
  elseif ($delta == 4) {
    if (!$long) {
      return t('Links to video content with \'rel="lightvideo"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
    }
    else {
      $output = '<p>'. t('It\'s possible to show video content in the lightbox.  In this case the "rel" attribute should be set to <code>lightvideo</code>.  It\'s possible to group videos and to control the size of the lightbox by setting the "width" and "height" properties.  The properties can be configured like <code>lightvideo[group|width:300px; height: 200px;][caption]</code>.  The properties should all be of the format "property: value;" - note the closing semi-colon.  If no properties are set, then the default width and height of 400px will be used.  See below for more detailed examples.') .'</p>';
      $output .= '<p>'. t('Basic example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;http://video.google.com/videoplay?docid=1811233136844420765&quot; rel=&quot;lightvideo&quot;&gt;Google video example - default size&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('Controlling lightbox size example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;http://video.google.com/videoplay?docid=1811233136844420765&quot; rel=&quot;lightvideo[group|width:400px; height:300px;][caption]&quot;&gt;Google video example - custom size&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('Supported video formats include asx, wmv, mov and swf.  A number of online video providers are also supported, including YouTube and Google Video.  For a full list of the current supported video providers please see the documentation on drupal.org.') .'</p>';
      return $output;
    }
  }
  elseif ($delta == 5) {
    if (!$long) {
      return t('Links to inline or modal content with \'rel="lightmodal"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
    }
    else {
      $output = '<p>'. t('It\'s possible to show HTML snippets in the lightbox, that is on the same domain.  In this case the "rel" attribute should be set to "lightmodal".  Again it\'s possible to group the content, (e.g. <code>lightmodal[group][caption]</code>) but in addition to that, it\'s possible to control some of the modal properties.  It\'s possible to set the "width", "height" and "scrolling" properties of the modal.  The properties are separated from the group name by a <code>|</code>, for example <code>lightmodal[group|width:100px;][caption]</code>.  If no grouping is being used, then the <code>|</code> is still used and the format would be <code>lightmodal[|width:100px;]</code>.  The properties should all be of the format "property: value;" - note the closing semi-colon.  If no modal properties are set, then the default width and height of 400px will be used.  See below for more detailed examples.') .'</p>';
      $output .= '<p>'. t('Basic example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;search.php&quot; rel=&quot;lightmodal&quot;&gt;Search&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('Grouped example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;search.php&quot; rel=&quot;lightmodal[search][caption 1]&quot;&gt;Search&lt;/a&gt;<br />&lt;a href=&quot;search.php?status=1&quot; rel=&quot;lightmodal[search]&quot;&gt;Search published&lt;/a&gt;</code>') .'</p>';

      $output .= '<p>'. t('Controlling modal property example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;search.php&quot; rel=&quot;lightmodal[|width:400px; height:300px; scrolling: auto;][caption]&quot;&gt;Search&lt;/a&gt;</code>') .'</p>';
      $output .= '<p>'. t('Controlling modal property when grouped example:') .'<br />';
      $output .= t('<code>&lt;a href=&quot;search.php&quot; rel=&quot;lightmodal[search|width:400px; height:300px; scrolling: auto;]&quot;&gt;Search&lt;/a&gt;<br />&lt;a href=&quot;search.php?status=1&quot; rel=&quot;lightmodal[search|width:400px; height:300px;]&quot;&gt;Search published&lt;/a&gt;</code>') .'</p>';

      return $output;
    }
  }
}

/**
 * Implementation of hook_filter().
 */
function lightbox2_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(
        0 => t('Lightbox filter'),
        1 => t('Lightbox G2 filter'),
        2 => t('Lightbox slideshow filter'),
        3 => t('Lightbox iframe filter'),
        4 => t('Lightbox video filter'),
        5 => t('Lightbox modal filter'),
        6 => t('Disable Lightbox iframe filter'),
      );

    case 'description':
      if ($delta == 0) {
        return t('Image links with \'rel="lightbox"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
      }
      elseif ($delta == 1) {
        return t('Turns g2_filter links into Lightbox2 appropriate links');
      }
      elseif ($delta == 2) {
        return t('Image links with \'rel="lightshow"\' in the &lt;a&gt; tag will appear in a Lightbox slideshow when clicked on.');
      }
      elseif ($delta == 3) {
        return t('Links to HTML content with \'rel="lightframe"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
      }
      elseif ($delta == 4) {
        return t('Links to video content with \'rel="lightvideo"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
      }
      elseif ($delta == 5) {
        return t('Links to inline or modal content with \'rel="lightmodal"\' in the &lt;a&gt; tag will appear in a Lightbox when clicked on.');
      }
      elseif ($delta == 6) {
        return t('It\'s possible to show webpage content in the lightbox, using iframes.  In this case the "rel" attribute should be set to "lightframe".  However, users can do this without any filters to be enabled.  To prevent users from adding iframes to the site in this manner, then please enable this option.');
      }

    case 'process':
      if ($delta == 1) {
        $text = ' '. $text .' ';
        $text = preg_replace('/ShowItem/', 'DownloadItem', $text);
        $text = preg_replace('/src="/', 'rel="lightbox" src="', $text);
        $text = drupal_substr($text, 1, -1);
      }
      elseif ($delta == 6) {
        $text = preg_replace('/<a([^>]*?)(rel=[\'"]*lightframe[\'"]*)([^>]*?)>/i', '<a\1\3>', $text);
      }
      return $text;

    default:
      return $text;
  }
}

/**
 * Provide links to the CSS stylesheet and JS file associated with
 * this module.
 */
function lightbox2_add_files() {
  global $language, $user;
  static $already_added = FALSE;
  if ($already_added) {
    return; // Don't add the JavaScript and CSS multiple times.
  }
  $already_added = TRUE;

  // Load required js and css files.
  $path = drupal_get_path('module', 'lightbox2');

  // Initialise some variables.
  $inline_image_handler = variable_get('lightbox2_inline', 0);
  $flickr_image_handler = variable_get('lightbox2_flickr', 0);
  $gallery2_block_handler = variable_get('lightbox2_gallery2_blocks', 0);
  $image_assist_handler = variable_get('lightbox2_image_assist_custom', 0);
  $image_node_handler = variable_get('lightbox2_image_node', 0);

  $custom_class_handler = 0;
  switch (variable_get('lightbox2_custom_class_handler', 0)) {
    case 1:
      $custom_class_handler = 'lightbox_ungrouped';
      break;
    case 2:
      $custom_class_handler = 'lightbox';
      break;
    case 3:
      $custom_class_handler = 'lightshow';
      break;
    case 4:
      $custom_class_handler = 'lightframe_ungrouped';
      break;
    case 5:
      $custom_class_handler = 'lightframe';
      break;
  }


  // Set the list of image classes to format urls for.
  $image_node_sizes = '';
  $trigger_lightbox_classes = '';
  $trigger_lightbox_group_classes = '';
  $trigger_slideshow_classes = '';
  $trigger_lightframe_classes = '';
  $trigger_lightframe_group_classes = '';

  // Inline module images.
  switch ($inline_image_handler) {
    case 1:
      $trigger_lightbox_classes .= 'img.inline,';
      break;
    case 2:
      $trigger_lightbox_group_classes .= 'img.inline,';
      break;
    case 3:
      $trigger_slideshow_classes .= 'img.inline,';
      break;
    case 4:
      $trigger_lightframe_classes .= 'img.inline,';
      break;
    case 5:
      $trigger_lightframe_group_classes .= 'img.inline,';
      break;
  }

  // Flickr images.
  switch ($flickr_image_handler) {
    case 1:
      $trigger_lightbox_classes .= 'img.flickr-photo-img,img.flickr-photoset-img,';
      break;
    case 2:
      $trigger_lightbox_group_classes .= 'img.flickr-photo-img,img.flickr-photoset-img,';
      break;
    case 3:
      $trigger_slideshow_classes .= 'img.flickr-photo-img,img.flickr-photoset-img,';
      break;
    case 4:
      $trigger_lightframe_classes .= 'img.flickr-photo-img,img.flickr-photoset-img,';
      break;
    case 5:
      $trigger_lightframe_group_classes .= 'img.flickr-photo-img,img.flickr-photoset-img,';
      break;
  }

  // Gallery2 block images.
  switch ($gallery2_block_handler) {
    case 1:
      $trigger_lightbox_classes .= 'img.ImageFrame_image,img.ImageFrame_none,';
      break;
    case 2:
      $trigger_lightbox_group_classes .= 'img.ImageFrame_image,img.ImageFrame_none,';
      break;
    case 3:
      $trigger_slideshow_classes .= 'img.ImageFrame_image,img.ImageFrame_none,';
      break;
    case 4:
      $trigger_lightframe_classes .= 'img.ImageFrame_image,img.ImageFrame_none,';
      break;
    case 5:
      $trigger_lightframe_group_classes .= 'img.ImageFrame_image,img.ImageFrame_none,';
      break;
  }

  // Image Assist custom size images.
  switch ($image_assist_handler) {
    case 1:
      $trigger_lightbox_classes .= 'img.image-img_assist_custom,';
      break;
    case 2:
      $trigger_lightbox_group_classes .= 'img.image-img_assist_custom,';
      break;
    case 3:
      $trigger_slideshow_classes .= 'img.image-img_assist_custom,';
      break;
    case 4:
      $trigger_lightframe_classes .= 'img.image-img_assist_custom,';
      break;
    case 5:
      $trigger_lightframe_group_classes .= 'img.image-img_assist_custom,';
      break;
  }

  // Image nodes.
  if ($image_node_handler) {
    $trigger_sizes = variable_get('lightbox2_trigger_image_size', array('thumbnail'));
    usort($trigger_sizes, "sort_by_length");
    foreach ($trigger_sizes as $size) {
      $triggers = "img.$size, img.image-$size,";
      if (empty($size)) {
        $triggers = "img._original, img.image-_original,";
      }
      else {
        $image_node_sizes .= "\.$size|";
      }
      switch ($image_node_handler) {
        case 1:
          $trigger_lightbox_classes .= $triggers;
          break;
        case 2:
          $trigger_lightbox_group_classes .= $triggers;
          break;
        case 3:
          $trigger_slideshow_classes .= $triggers;
          break;
        case 4:
          $trigger_lightframe_classes .= $triggers;
          break;
        case 5:
          $trigger_lightframe_group_classes .= $triggers;
          break;
      }
    }
  }

  // Custom images.
  $custom_triggers = variable_get('lightbox2_custom_trigger_classes', '');
  $custom_trigger_classes = '';
  if ($custom_class_handler && !empty($custom_triggers)) {
    $trigger_classes = preg_split("/(\r\n|\n)/", $custom_triggers);
    foreach ($trigger_classes as $class) {
      if (!empty($class)) {
        $custom_trigger_classes .= "img.$class,";
      }
    }
  }
  $trigger_lightbox_classes = rtrim($trigger_lightbox_classes, ",");
  $trigger_lightbox_group_classes = rtrim($trigger_lightbox_group_classes, ",");
  $trigger_slideshow_classes = rtrim($trigger_slideshow_classes, ",");
  $trigger_lightframe_classes = rtrim($trigger_lightframe_classes, ",");
  $trigger_lightframe_group_classes = rtrim($trigger_lightframe_group_classes, ",");
  $custom_trigger_classes = rtrim($custom_trigger_classes, ",");
  $image_node_sizes = '('. rtrim($image_node_sizes, "|") .')';

  $enable_video = variable_get('lightbox2_enable_video', FALSE);
  $enable_login = $user->uid == 0 && variable_get('lightbox2_enable_login', FALSE);
  $enable_contact = module_exists('contact') && variable_get('lightbox2_enable_contact', FALSE) && user_access('access site-wide contact form');

  // Load the javascript settings.
  $js_settings = array(
    'rtl' => $language->direction,
    'file_path' => base_path() .'(\w\w/)'. file_directory_path(),
    'default_image' => base_path() . $path .'/images/brokenimage.jpg',
    'border_size' => variable_get('lightbox2_border_size', 10),
    'font_color' => variable_get('lightbox2_font_color', '000'),
    'box_color' => variable_get('lightbox2_box_color', 'fff'),
    'top_position' => variable_get('lightbox2_top_position', ''),
    'overlay_opacity' => variable_get('lightbox2_overlay_opacity', 0.8),
    'overlay_color' => variable_get('lightbox2_overlay_color', '000'),
    'disable_close_click' => variable_get('lightbox2_disable_close_click', TRUE),
    'resize_sequence' => variable_get('lightbox2_resize_sequence', 0),
    'resize_speed' => 1000 * variable_get('lightbox2_resize_speed', 0.4),
    'fade_in_speed' => 1000 * variable_get('lightbox2_fadein_speed', 0.4),
    'slide_down_speed' => 1000 * variable_get('lightbox2_slidedown_speed', 0.6),
    'use_alt_layout' => variable_get('lightbox2_use_alt_layout', FALSE),
    'disable_resize' => variable_get('lightbox2_disable_resize', FALSE),
    'disable_zoom' => variable_get('lightbox2_disable_zoom', FALSE),
    'force_show_nav' => variable_get('lightbox2_force_show_nav', FALSE),
    'loop_items' => variable_get('lightbox2_loop_items', FALSE),
    'node_link_text' => check_plain(variable_get('lightbox2_node_link_text', 'View Image Details')),
    'node_link_target' => variable_get('lightbox2_node_link_target', FALSE),
    'image_count' => check_plain(variable_get('lightbox2_image_count_str', 'Image !current of !total')),
    'video_count' => check_plain(variable_get('lightbox2_video_count_str', 'Video !current of !total')),
    'page_count' => check_plain(variable_get('lightbox2_page_count_str', 'Page !current of !total')),
    'lite_press_x_close' => t('press !x to close', array('!x' => '<a href="#" onclick="hideLightbox(); return FALSE;"><kbd>x</kbd></a>')),
    'download_link_text' => '',
    'enable_login' => $enable_login,
    'enable_contact' => $enable_contact,
    // Automatic image handling settings.
    'keys_close' => variable_get('lightbox2_keys_close', 'c x 27'),
    'keys_previous' => variable_get('lightbox2_keys_previous', 'p 37'),
    'keys_next' => variable_get('lightbox2_keys_next', 'n 39'),
    'keys_zoom' => variable_get('lightbox2_keys_zoom', 'z'),
    'keys_play_pause' => variable_get('lightbox2_keys_play_pause', '32'),
    'display_image_size' => variable_get('lightbox2_display_image_size', ''),
    'image_node_sizes' => $image_node_sizes,
    'trigger_lightbox_classes' => $trigger_lightbox_classes,
    'trigger_lightbox_group_classes' => $trigger_lightbox_group_classes,
    'trigger_slideshow_classes' => $trigger_slideshow_classes,
    'trigger_lightframe_classes' => $trigger_lightframe_classes,
    'trigger_lightframe_group_classes' => $trigger_lightframe_group_classes,
    'custom_class_handler' => $custom_class_handler,
    'custom_trigger_classes' => $custom_trigger_classes,
    'disable_for_gallery_lists' => variable_get('lightbox2_disable_nested_galleries', TRUE),
    'disable_for_acidfree_gallery_lists' => variable_get('lightbox2_disable_nested_acidfree_galleries', TRUE),
    'enable_acidfree_videos' => variable_get('lightbox2_enable_acidfree_videos', TRUE),
    // Slideshow settings.
    'slideshow_interval' => variable_get('lightbox2_slideshow_interval', 5) * 1000,
    'slideshow_automatic_start' => variable_get('lightbox2_slideshow_automatic_start', TRUE),
    'slideshow_automatic_exit' => variable_get('lightbox2_slideshow_automatic_exit', TRUE),
    'show_play_pause' => variable_get('lightbox2_slideshow_show_play_pause', TRUE),
    'pause_on_next_click' => variable_get('lightbox2_slideshow_pause_on_next_click', FALSE),
    'pause_on_previous_click' => variable_get('lightbox2_slideshow_pause_on_previous_click', TRUE),
    'loop_slides' => variable_get('lightbox2_loop_slides', FALSE),
    // Iframe settings.
    'iframe_width' => variable_get('lightbox2_default_frame_width', 600),
    'iframe_height' => variable_get('lightbox2_default_frame_height', 400),
    'iframe_border' => variable_get('lightbox2_frame_border', 1),
    // Video settings.
    'enable_video' => $enable_video,
  );
  if ($enable_video) {
    $js_settings['flvPlayer'] = check_plain(variable_get('lightbox2_flv_player_path', '/flvplayer.swf'));
    $js_settings['flvFlashvars'] = check_plain(variable_get('lightbox2_flv_player_flashvars', ''));
  }

  // Only supply these if the user has the correct permissions.
  if (user_access('download original image') && user_access('view original images')) {
    $js_settings['download_link_text'] = check_plain(variable_get('lightbox2_download_link_text', 'Download Original'));
  }

  drupal_add_js(array('lightbox2' => $js_settings), 'setting');


  // Check where we should load the javascript files - header or footer.
  $js_location = variable_get('lightbox2_js_location', 'header');

  // Lightbox2 Plus.
  if (!variable_get('lightbox2_lite', FALSE)) {
    $css = $path .'/css/lightbox.css';
    if (variable_get('lightbox2_use_alt_layout', FALSE)) {
      $css = $path .'/css/lightbox_alt.css';
    }
    drupal_add_css($css);

    // Check to see if any automatic image handling options are enabled.
    if ($image_node_handler || $flickr_image_handler || $gallery2_block_handler || $inline_image_handler || $image_assist_handler || $custom_triggers != '') {
      drupal_add_js($path .'/js/auto_image_handling.js', 'module', $js_location);
    }
    if (variable_get('lightbox2_enable_video', FALSE)) {
      drupal_add_js($path .'/js/lightbox_video.js', 'module', $js_location);
    }
    if ($enable_login || $enable_contact) {
      drupal_add_js($path .'/js/lightbox_modal.js', 'module', $js_location);
    }
    drupal_add_js($path .'/js/lightbox.js', 'module', $js_location);

  }
  // Lightbox Lite.
  else {
    $css = $path .'/css/lightbox_lite.css';
    drupal_add_css($css);
    drupal_add_js($path .'/js/lightbox_lite.js', 'module', $js_location);
  }
}

/**
 * Implementation of hook_field_formatter_info().
 *
 * Add certain lightbox and imagecache formatters to CCK image fields if
 * the imagefield.module and the imagecache.module exist.  Add additional
 * formatters if emfield, emimage and/or emvideo modules exist.
 */
function lightbox2_field_formatter_info() {
  $formatters = array();
  $lightbox = $slideshow = $iframe = array();
  // Handle imagefield and filefield images.
  if (module_exists('imagecache') && (module_exists('imagecache') || module_exists('filefield'))) {
    $rules = array();
    if (function_exists('imagecache_presets')) {
      $presets = imagecache_presets();
      foreach ($presets as $preset_id => $preset_info) {
        $rules[$preset_id] = $preset_info['presetname'];
      }
    }
    else {
      $rules = _imagecache_get_presets();
    }
    $iframe['imagefield__lightframe2__original__node'] = array(
      'label' => 'Lightbox2 iframe: original->node page',
      'field types' => array('image', 'filefield'),
    );
    foreach ($rules as $ruleid => $view_rule) {
      $lightbox['imagefield__lightbox2__original__'. $view_rule] = array(
        'label' => 'Lightbox2: original->'. $view_rule,
        'field types' => array('image', 'filefield'),
      );
      $lightbox['imagefield__lightbox2__'. $view_rule .'__original'] = array(
        'label' => 'Lightbox2: '. $view_rule .'->original',
        'field types' => array('image', 'filefield'),
      );
      $slideshow['imagefield__lightshow2__original__'. $view_rule] = array(
        'label' => 'Lightbox2 slideshow: original->'. $view_rule,
        'field types' => array('image', 'filefield'),
      );
      $slideshow['imagefield__lightshow2__'. $view_rule .'__original'] = array(
        'label' => 'Lightbox2 slideshow: '. $view_rule .'->original',
        'field types' => array('image', 'filefield'),
      );
      $iframe['imagefield__lightframe2__'. $view_rule .'__node'] = array(
        'label' => 'Lightbox2 iframe: '. $view_rule .'->node page',
        'field types' => array('image', 'filefield'),
      );
      foreach ($rules as $rid => $lightbox_rule) {
        $lightbox['imagefield__lightbox2__'. $view_rule .'__'. $lightbox_rule] = array(
          'label' => 'Lightbox2: '. $view_rule .'->'. $lightbox_rule,
          'field types' => array('image', 'filefield'),
        );
        $slideshow['imagefield__lightshow2__'. $view_rule .'__'. $lightbox_rule] = array(
          'label' => 'Lightbox2 slideshow: '. $view_rule .'->'. $lightbox_rule,
          'field types' => array('image', 'filefield'),
        );
      }
    }
    // Adding them now so they are in some sort of sensible order.
    $formatters = array_merge($lightbox, $slideshow, $iframe);
  }
  if (module_exists('emfield') && module_exists('emimage')) {
    $formatters['emimage_lightbox2'] = array(
      'label' => t('Lightbox2: Image Thumbnail -> Original'),
      'field types' => array('emimage'),
    );
    $formatters['emimage_lightshow2'] = array(
      'label' => t('Lightbox2 slideshow: Image Thumbnail -> Original'),
      'field types' => array('emimage'),
    );
    $formatters['emimage_lightframe2'] = array(
      'label' => t('Lightbox2 iframe: Image Thumbnail -> Content'),
      'field types' => array('emimage'),
    );
  }
  if (variable_get('lightbox2_enable_video', FALSE) && module_exists('emfield') && module_exists('emvideo')) {
    $formatters['emvideo_lightvideo'] = array(
      'label' => t('Lightbox2: Image Thumbnail -> Full Size Video'),
      'field types' => array('emvideo'),
    );
  }
  if (module_exists('filefield')) {
    $formatters['filefield_lightframe'] = array(
      'label' => t('Lightbox2 iframe'),
      'field types' => array('filefield'),
    );
  }

  return $formatters;
}


/**
 * Implementation of hook_theme().
 */
function lightbox2_theme() {
  $theme = array(
    'lightbox2_image' => array(
      'arguments' => array('path' => NULL, 'alt' => '', 'title' => '', 'attributes' => array()),
      'file' => 'lightbox2.formatter.inc',
    ),
    // Emfield theme functions.
    'lightbox2_emimage' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL, 'args' => array()),
      'file' => 'lightbox2.formatter.inc',
    ),
    'lightbox2_formatter_emimage' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
    ),
    'lightbox2_formatter_emimage_lightbox2' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
      'function' => 'theme_lightbox2_formatter_emimage',
    ),
    'lightbox2_formatter_emimage_lightshow2' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
      'function' => 'theme_lightbox2_formatter_emimage',
    ),
    'lightbox2_formatter_emimage_lightframe2' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
      'function' => 'theme_lightbox2_formatter_emimage',
    ),
    'lightbox2_formatter_emvideo_lightvideo' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
    ),
    'lightbox2_emvideo' => array(
      'arguments' => array('field' => NULL, 'item' => NULL, 'formatter' => NULL, 'node' => NULL),
      'file' => 'lightbox2.formatter.inc',
    ),
    // Filefield theme functions.
    'lightbox2_formatter_filefield_lightframe' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
    ),
    'lightbox2_file_formatter_lightbox2_iframe' => array(
      'arguments' => array('file' => NULL, 'field' => NULL, 'file_formatter_settings' => NULL),
      'file' => 'lightbox2.formatter.inc',
    ),
    // Global imagecache + imagefield theme functions.
    'lightbox2_formatter_imagefield' => array(
      'arguments' => array('element' => NULL),
      'file' => 'lightbox2.formatter.inc',
    ),
    'imagefield_image_imagecache_lightbox2' => array(
      'arguments' => array('view_preset' => NULL, 'field_name' => NULL, 'item' => NULL, 'node' => NULL, 'rel' => 'lightbox', 'args' => array()),
      'file' => 'lightbox2.formatter.inc',
    ),
  );

  // Additional imagecache + imagefield theme functions, by preset.
  if (module_exists("imagecache")) {

    $theme['lightbox2_formatter_imagefield__lightframe2__original__node'] = array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_lightbox2_formatter_imagefield',
      'file' => 'lightbox2.formatter.inc',
    );

    foreach (imagecache_presets() as $src) {
      $theme['lightbox2_formatter_imagefield__lightbox2__'. $src['presetname'] .'__original'] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_lightbox2_formatter_imagefield',
        'file' => 'lightbox2.formatter.inc',
      );
      $theme['lightbox2_formatter_imagefield__lightshow2__'. $src['presetname'] .'__original'] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_lightbox2_formatter_imagefield',
        'file' => 'lightbox2.formatter.inc',
      );
      $theme['lightbox2_formatter_imagefield__lightbox2__original__'. $src['presetname']] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_lightbox2_formatter_imagefield',
        'file' => 'lightbox2.formatter.inc',
      );
      $theme['lightbox2_formatter_imagefield__lightshow2__original__'. $src['presetname']] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_lightbox2_formatter_imagefield',
        'file' => 'lightbox2.formatter.inc',
      );
      $theme['lightbox2_formatter_imagefield__lightframe2__'. $src['presetname'] .'__node'] = array(
        'arguments' => array('element' => NULL),
        'function' => 'theme_lightbox2_formatter_imagefield',
        'file' => 'lightbox2.formatter.inc',
      );

      foreach (imagecache_presets() as $dest) {
        $theme['lightbox2_formatter_imagefield__lightbox2__'. $src['presetname'] .'__'. $dest['presetname']] = array(
          'arguments' => array('element' => NULL),
          'function' => 'theme_lightbox2_formatter_imagefield',
          'file' => 'lightbox2.formatter.inc',
        );
        $theme['lightbox2_formatter_imagefield__lightshow2__'. $src['presetname'] .'__'. $dest['presetname']] = array(
          'arguments' => array('element' => NULL),
          'function' => 'theme_lightbox2_formatter_imagefield',
          'file' => 'lightbox2.formatter.inc',
        );
      }
    }
  }

  return $theme;
}

/**
 * Configures settings and outputs the video.
 *
 * @param nid
 *   The node id.
 * @param width
 *   The lightbox video width.
 * @param height
 *   The lightbox video height.
 * @param field_name
 *   The name of the cck field the video is contained in.
 * @param provider
 *   The name of the 3rd party video provider.
 * @param id
 *   The video id.
 */
function lightbox2_emvideo($nid, $width, $height, $field_name, $provider, $id) {
  $field = array();
  $field['widget']['video_width'] = $width;
  $field['widget']['video_height'] = $height;
  $field['widget']['video_autoplay'] = 1;
  $field['field_name'] = $field_name;
  $node = node_load($nid);
  $items = $node->$field_name;
  foreach ($items as $item) {
    if ($item['provider'] == $provider && $item['value'] == $id) {
      break;
    }
  }
  print theme('emvideo_video_video', $field, $item, 'video_video', $node);
}

/**
 * Return TRUE if current path is disabled for lightbox according to
 * lightbox2_page_list and lightbox2_page_init_action.
 */
function lightbox2_exclude_these_paths() {
  $action = variable_get('lightbox2_page_init_action', 'page_disable');
  $page_list = variable_get('lightbox2_page_list', '');

  if (!empty($page_list)) {
    // Retrieve Drupal alias for the current path (if exists).
    $alias = drupal_get_path_alias($_GET['q']);

    if (drupal_match_path($_GET['q'], $page_list) || drupal_match_path($alias, $page_list)) {
      return ($action == 'page_disable' ? 1 : 0);
    }
  }

  return ($action == 'page_disable' ? 0 : 1);
}


function lightbox2_preprocess_page(&$variables) {
  if (arg(0) != 'node' || arg(2) != 'lightbox2') {
    return;
  }
  // Add favicon
  if (theme_get_setting('toggle_favicon')) {
    drupal_set_html_head('<link rel="shortcut icon" href="'. check_url(theme_get_setting('favicon')) .'" type="image/x-icon" />');
  }

  global $theme;
  // Populate all block regions.
  $regions = system_region_list($theme);
  // Load all region content assigned via blocks.
  foreach (array_keys($regions) as $region) {
    if ($region != 'content') {
      $variables[$region] = NULL;
    }
  }

  // Set up layout variable.
  $variables['layout'] = 'none';

  // Set mission when viewing the frontpage.
  if (drupal_is_front_page()) {
    $mission = filter_xss_admin(theme_get_setting('mission'));
  }

  // Construct page title
  if (drupal_get_title()) {
    $head_title = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));
  }
  else {
    $head_title = array(variable_get('site_name', 'Drupal'));
    if (variable_get('site_slogan', '')) {
      $head_title[] = variable_get('site_slogan', '');
    }
  }
  $variables['head_title']        = implode(' | ', $head_title);
  $variables['base_path']         = base_path();
  $variables['front_page']        = url();
  $variables['breadcrumb']        = theme('breadcrumb', drupal_get_breadcrumb());
  $variables['feed_icons']        = drupal_get_feeds();
  $variables['footer_message']    = filter_xss_admin(variable_get('site_footer', FALSE));
  $variables['head']              = drupal_get_html_head();
  $variables['help']              = theme('help');
  $variables['language']          = $GLOBALS['language'];
  $variables['language']->dir     = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $variables['logo']              = theme_get_setting('logo');
  $variables['messages']          = $variables['show_messages'] ? theme('status_messages') : '';
  $variables['mission']           = isset($mission) ? $mission : '';
  $variables['primary_links']     = theme_get_setting('toggle_primary_links') ? menu_primary_links() : array();
  $variables['secondary_links']   = theme_get_setting('toggle_secondary_links') ? menu_secondary_links() : array();
  $variables['search_box']        = (theme_get_setting('toggle_search') ? drupal_get_form('search_theme_form') : '');
  $variables['site_name']         = (theme_get_setting('toggle_name') ? variable_get('site_name', 'Drupal') : '');
  $variables['site_slogan']       = (theme_get_setting('toggle_slogan') ? variable_get('site_slogan', '') : '');
  $variables['css']               = drupal_add_css();
  $variables['styles']            = drupal_get_css();
  $variables['scripts']           = drupal_get_js();
  $variables['tabs']              = theme('menu_local_tasks');
  $variables['title']             = drupal_get_title();
  // Closure should be filled last.
  $variables['closure']           = theme('closure');

  if ($node = menu_get_object()) {
    $variables['node'] = $node;
  }

  // Compile a list of classes that are going to be applied to the body element.
  // This allows advanced theming based on context (home page, node of certain type, etc.).
  $body_classes = array();
  // Add a class that tells us whether we're on the front page or not.
  $body_classes[] = $variables['is_front'] ? 'front' : 'not-front';
  // Add a class that tells us whether the page is viewed by an authenticated user or not.
  $body_classes[] = $variables['logged_in'] ? 'logged-in' : 'not-logged-in';
  // Add arg(0) to make it possible to theme the page depending on the current page
  // type (e.g. node, admin, user, etc.). To avoid illegal characters in the class,
  // we're removing everything disallowed. We are not using 'a-z' as that might leave
  // in certain international characters (e.g. German umlauts).
  $body_classes[] = preg_replace('![^abcdefghijklmnopqrstuvwxyz0-9-_]+!s', '', 'page-'. form_clean_id(drupal_strtolower(arg(0))));
  // If on an individual node page, add the node type.
  if (isset($variables['node']) && $variables['node']->type) {
    $body_classes[] = 'node-type-'. form_clean_id($variables['node']->type);
  }
  // Add information about the number of sidebars.
  if ($variables['layout'] == 'both') {
    $body_classes[] = 'two-sidebars';
  }
  elseif ($variables['layout'] == 'none') {
    $body_classes[] = 'no-sidebars';
  }
  else {
    $body_classes[] = 'one-sidebar sidebar-'. $variables['layout'];
  }
  // Implode with spaces.
  $variables['body_classes'] = implode(' ', $body_classes);

  // Build a list of suggested template files in order of specificity. One
  // suggestion is made for every element of the current path, though
  // numeric elements are not carried to subsequent suggestions. For example,
  // http://www.example.com/node/1/edit would result in the following
  // suggestions:
  //
  // page-node-edit.tpl.php
  // page-node-1.tpl.php
  // page-node.tpl.php
  // page.tpl.php
  $i = 0;
  $suggestion = 'page';
  $suggestions = array();
  while ($arg = arg($i++)) {
    $suggestions[] = $suggestion .'-'. $arg;
    if (!is_numeric($arg)) {
      $suggestion .= '-'. $arg;
    }
  }
  if (drupal_is_front_page()) {
    $suggestions[] = 'page-front';
  }

  if ($suggestions) {
    $variables['template_files'] = $suggestions;
  }
}

/**
 * Display the video object.
 *
 * Displays the video object for a specified nid.  It is used for * displaying
 * videos in acidfree lists in a lightbox when the thumbnail is clicked on.  It
 * is only triggered for the url 'node/%nid/lightframevideo'.
 *
 * @param $nid
 *   Unique identifier of the node.
 */
function lightbox2_acidfree_video($nid) {
  $node = node_load($nid);
  print theme('video_player', $node);
}

/**
 * Implementation of filefield's hook_file_formatter_info().
 */
function lightbox2_file_formatter_info() {
  return array(
    'lightbox2_iframe' => array(
      'suitability callback' => 'lightbox2_check_filefield_extension',
      'title' => t('Lightbox2 iframe'),
      'description' => t('Displays all kinds of files in a popup lightbox in an iframe.'),
    ),
    'lightbox2_image' => array(
      'suitability callback' => 'lightbox2_check_filefield_image_extension',
      'title' => t('Lightbox2 image'),
      'description' => t('Displays image files in a popup lightbox.'),
    ),
  );
}

/**
 * Suitability callback function for the filefield formatter.
 *
 * @param $file
 *   The file object, containing filepath, mime type, etc.
 * @param $field
 *   CCK field information.
 * @return
 *   True if file extension is supported.
 */
function lightbox2_check_filefield_extension($file, $field) {
  $ext = array_pop(explode('.', $file->filename));
  return lightbox2_supported_file_extension($ext);
}

/**
 * Suitability callback function for the image filefield formatter.
 *
 * @param $file
 *   The file object, containing filepath, mime type, etc.
 * @param $field
 *   CCK field information.
 * @return
 *   True if file extension is supported.
 */
function lightbox2_check_filefield_image_extension($file, $field) {
  $ext = array_pop(explode('.', $file->filename));
  return lightbox2_supported_file_extension($ext, 'image');
}


/**
 * Check whether a given file extension is supported by the lightbox iframe.
 *
 * @param $ext
 *   File extension
 * @param $type
 *   Type of file extensions to check.
 * @return
 *   TRUE if extension is supported.
 */
function lightbox2_supported_file_extension($ext, $type = 'all') {
  $image_extensions = array('png', 'jpg', 'jpeg', 'gif', 'bmp');
  $movie_extensions = array('dv', 'mov', 'moov', 'movie', 'mp4', 'asf', 'wm', 'wmv', 'avi', 'mpg', 'mpeg');
  $web_extensions = array('asp', 'aspx', 'cgi', 'cfm', 'htm', 'html', 'pl', 'php', 'php3', 'php4', 'php5', 'phtml', 'rb', 'rhtml', 'shtml', 'txt', 'vbs');
  $misc_extensions = array('pdf');

  $extensions = array();
  switch ($type) {
    case 'image':
      $extensions = $image_extensions;
      break;
    case 'movie':
      $extensions = $movie_extensions;
      break;
    case 'web':
      $extensions = $web_extensions;
      break;
    case 'misc':
      $extensions = $misc_extensions;
      break;
    case 'all':
    default:
      $extensions = array_merge($image_extensions, $movie_extensions, $web_extensions, $misc_extensions);
      break;
  }

  if (in_array(drupal_strtolower($ext), $extensions)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Helper function to compare the string length of two items.  Used when trying
 * to sort an array by value length.
 *
 * @param $a
 *   String to compare.
 * @param $b
 *   String to compare.
 * @return
 *   0 if they are the same length, -1 if $a is longer than $b, 1 otherwise.
 */
function sort_by_length($a, $b) {
  if ($a == $b) {
    return 0;
  }
  return (drupal_strlen($a) > drupal_strlen($b) ? -1 : 1);
}

/**
 * Get the user login form.
 */
function lightbox2_login() {
  print drupal_get_form('user_login_block');

  // If the OpenID module is enabled, the javascript and css may not exist
  // on the page, so add them dynamically.
  if (module_exists('openid')) {
    $path = drupal_get_path('module', 'openid');
    $js_file = base_path() . $path .'/openid.js';
    $css_file = base_path() . $path .'/openid.css';

    // Load the javascript dynamically.
    print '<script type="text/javascript">$.getScript("'. $js_file .'", function () {if ($.isFunction(Drupal.behaviors.openid)) { Drupal.behaviors.openid(document); } });</script>';

    // Load the css file dynamically.
    print '<script type="text/javascript">
      var fileref=document.createElement("link");
      fileref.setAttribute("rel", "stylesheet");
      fileref.setAttribute("type", "text/css");
      fileref.setAttribute("href", "'. $css_file .'");
      document.getElementsByTagName("head")[0].appendChild(fileref);
      </script>';
  }

  // drupal_add_js() with 'inline' didn't seem to work, possibly because this is
  // AJAX loaded content.
  print '<script type="text/javascript">Drupal.attachBehaviors();</script>';
  exit;
}

/**
 * Get the contact form.
 */
function lightbox2_contact() {
  if (module_exists('contact') && variable_get('lightbox2_enable_contact', FALSE) && user_access('access site-wide contact form')) {
    $path = drupal_get_path('module', 'contact');
    include_once($path .'/contact.pages.inc');
    print drupal_get_form('contact_mail_page');
    // drupal_add_js() with 'inline' didn't seem to work, possibly because this is
    // AJAX loaded content.
    print '<script type="text/javascript">Drupal.attachBehaviors();</script>';
    exit;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Update the page action and input size.
 *
 * @param &$form
 *   General reference used in drupal, defining the structure & the fields of
 *   a form.
 * @param $form_state
 *   General variable, used to control the processing of the form.
 * @param $form_id
 *   The default is "user_login_block"; hold the page where the function is being
 *   used.
 * @return
 *   Return the structure of the form.
 */
function lightbox2_form_user_login_block_alter(&$form, $form_state, $form_id = "user_login_block") {
  if ($form_id == 'user_login_block' && arg(0) == 'user' && arg(1) == 'login' && arg(2) == 'lightbox2') {
    $form['#action'] = url('user/login/lightbox2', array('query' => 'destination='. $_GET['destination']));
  }
}

/**
 * Implementation of hook_link_alter().
 *
 * Add a lightbox2 rel attribute to the image link sizes on the image node.
 */
function lightbox2_link_alter(&$links, $node) {
  $image_node_handler = variable_get('lightbox2_image_node', 0);

  // Only operate on image nodes and if automatic handling for image nodes is
  // enabled.  Also ensure $links is an array (bug in contemplate module).
  if (($node->type != 'image' && $image_node_handler) || !is_array($links)) {
    return;
  }
  $trigger_sizes = variable_get('lightbox2_trigger_image_size', array('thumbnail'));

  // Change original ('') to '_original'.
  if (isset($trigger_sizes[''])) {
    unset($trigger_sizes['']);
    $trigger_sizes['_original'] = '_original';
  }

  $rel = '';
  switch ($image_node_handler) {
    case 1: // Lightbox.
    case 2: // Lightbox grouped.
    case 3: // Slideshow.
      $rel = 'lightbox';
      break;
    case 4: // Lightframe.
    case 5: // Lightframe grouped.
      $rel = 'lightframe';
      break;
  }
  $rel = $rel .'[]['. $node->title .']';
  foreach ($trigger_sizes as $size) {
    if (isset($links['image_size_'. $size])) {
      $links['image_size_'. $size]['attributes']['rel'] = $rel;
      $links['image_size_'. $size]['href'] = $node->images[$size];
      unset($links['image_size_'. $size]['query']);
    }
  }
}
