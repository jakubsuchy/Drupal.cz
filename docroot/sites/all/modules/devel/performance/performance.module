<?php
// $Id: performance.module,v 1.2.2.27 2009/09/13 12:11:34 salvis Exp $

/**
 * @file performance.module
  * Logs detailed and/or summary page generation time and memory consumption for page requests.
 * Copyright Khalid Baheyeldin 2008 of http://2bits.com
 */

define('PERFORMANCE_KEY', 'dru-perf:'. $_SERVER['HTTP_HOST'] .':');

function performance_menu() {
  $items = array();

  $items['admin/settings/performance_logging'] = array(
    'title'            => 'Performance logging',
    'description'      => 'Logs performance data: page generation times and memory usage.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('performance_settings'),
    'access arguments' => array('access administration pages'),
  );

  $items['admin/settings/performance_logging/apc_clear'] = array(
    'title'            => 'Clear APC',
    'description'      => 'Clears performance statistics collected in APC.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('performance_clear_apc_confirm'),
    'access arguments' => array('access administration pages'),
  );

  $items['admin/reports/performance_logging_summary'] = array(
    'title'            => 'Performance Logs: Summary',
    'description'      => 'View summary performance logs: page generation times and memory usage.',
    'page callback'    => 'performance_view_summary',
    'access arguments' => array('access site reports'),
  );

  $items['admin/reports/performance_logging_details'] = array(
    'title'            => 'Performance Logs: Details',
    'description'      => 'View detailed, per page, performance logs: page generation times and memory usage.',
    'page callback'    => 'performance_view_details',
    'access arguments' => array('access site reports'),
  );

  return $items;
}

function performance_settings() {
  $options = array(
    0 => t('Disabled'),
    1 => t('Enabled'),
  );

  if (function_exists('apc_cache_info')) {
    drupal_set_message(t('APC is enabled. It is reasonably safe to enable summary logging on live sites.'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('APC is not enabled. It is <strong>not</strong> safe to enable summary logging to the database on live sites.'), 'error', FALSE);
  }

  $form['mode'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Logging mode'),
    '#collapsible' => TRUE,
  );

  $form['mode']['performance_detail'] = array(
    '#type'          => 'select',
    '#title'         => t('Detailed logging'),
    '#default_value' => variable_get('performance_detail', 0),
    '#options'       => $options,
    '#description'   => t('Log memory usage and page generation times for every page. This logging mode is <strong>not</strong> suitable for large sites, as it can degrade performance severly. It is intended for use by developers, or on a test copy of the site.'),
  );

  $form['mode']['performance_summary_db'] = array(
    '#type'          => 'select',
    '#title'         => t('Summary logging (DB)'),
    '#default_value' => variable_get('performance_summary_db', 0),
    '#options'       => $options,
    '#description'   => t('Log summary data, such as average and maximum page generation times and memory usage to the database. This logging mode is <strong>not</strong> suitable for most live sites.'),
  );

  $disabled = TRUE;
  if (function_exists('apc_cache_info')) {
    $disabled = FALSE;
  }

  $form['mode']['performance_summary_apc'] = array(
    '#type'          => 'select',
    '#title'         => t('Summary logging (APC)'),
    '#default_value' => variable_get('performance_summary_apc', 0),
    '#options'       => $options,
    '#disabled'      => $disabled,
    '#description'   => t('Log summary data, such as average and maximum page generation times and memory usage to APC, if installed. The summary will be stored in APC memory, and hence there is no load on the database. This logging to APC is suitable for most live sites, unless the number of unique page accesses is excessively high.'),
  );

  $form['other'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Other'),
    '#collapsible' => TRUE,
  );

  $form['other']['dev_query'] = array(
    '#type'          => 'select',
    '#disabled'      => TRUE,
    '#title'         => t('Database Query timing and count'),
    '#default_value' => variable_get('dev_query', 0),
    '#options'       => $options,
    '#description'   => t('Log database query timing and query count for each page. This is useful to know if the bottleneck is in excessive database query counts, or the time required to execute those queries is high. Enabling this will incurr some memory overhead as query times and the actual query strings are cached in memory as arrays for each page, hence skewing the overall page memory reported. Please note that this settings is enabled or disabled in the settings of the devel module.'),
  );

  $form['other']['performance_threshold_accesses'] = array(
    '#type'          => 'select',
    '#title'         => t('Accesses threshold'),
    '#default_value' => variable_get('performance_threshold_accesses', 0),
    '#options'       => array(0, 1, 2, 5, 10),
    '#description'   => t('When displaying the summary report and using APC, only pages with the number of accesses larger than the specified threshold will be shown. Also, when cron runs, pages with that number of accesses or less will be removed, so as not to overflow APC\'s shared memory. This is useful on a live site with a high volume of hits. On a development site, you probably want this set to 0, so you can see all pages.'),
  );

  return system_settings_form($form);
}

function performance_boot() {
  register_shutdown_function('performance_shutdown');
}

function performance_shutdown() {
  global $queries;

  if ($_GET['q']) {
    // q= has a value, use that for the path
    $path = $_GET['q'];
  }
  else {
    // q= is empty, use whatever the site_frontpage is set to
    $path = variable_get('site_frontpage', 'node');
  }

  $params = array(
    'timer' => timer_read('page'),
    'path'  => $path,
  );

  // Memory
  if (function_exists('memory_get_peak_usage')) {
    $params['mem'] = memory_get_peak_usage(TRUE);
  }
  else {
    $params['mem'] = 0;
  }
  
  // Query time and count
  $query_count = 0;
  $query_timer = 0;
  $sum = 0;
  if (variable_get('dev_query', 0) && is_array($queries)) {
    foreach ($queries as $query) {
      $sum += $query[1];
    }
    $query_count = count($queries);
    $query_timer = round($sum * 1000, 2);
  }

  $params['query_count'] = $query_count;
  $params['query_timer'] = $query_timer;

  $anon = (!empty($data['anon'])) ? t('Yes') : t('No');

  $header = array(
    'path' => $path,
    'timer' => $params['timer'],
    'anon' => $anon,
  );
  module_invoke_all('performance', 'header', $header);

  if (variable_get('performance_detail', 0)) {
    $data = module_invoke_all('performance', 'data');
    if (!empty($data[0])) {
      $params['data'] = $data[0];
    }

    performance_log_details($params);
  }
  else {
    module_invoke_all('performance', 'disable');
  }

  if (variable_get('performance_summary_db', 0)) {
    performance_log_summary_db($params);
  }

  if (variable_get('performance_summary_apc', 0)) {
    if (function_exists('apc_cache_info')) {
      performance_log_summary_apc($params);
    }
  }
}

function performance_log_summary_apc($params = array()) {
  $key = PERFORMANCE_KEY . $params['path'];
  if ($data = apc_fetch($key)) {
    $data = array(
      'path'            => $data['path'],
      'last_access'     => time(),
      'bytes_max'       => max($params['mem'], $data['bytes_max']),
      'bytes_avg'       => ($data['bytes_avg'] + $params['mem']) / 2,
      'millisecs_max'   => max($params['timer'], $data['millisecs_max']),
      'millisecs_avg'   => ($data['millisecs_avg'] + $params['timer']) / 2,
      'query_timer_max' => max($params['query_timer'], $data['query_timer_max']),
      'query_timer_avg' => ($data['query_timer_avg'] + $params['query_timer']) / 2,
      'query_count_max' => max($params['query_count'], $data['query_count_max']),
      'query_count_avg' => ($data['query_count_avg'] + $params['query_count']) / 2,
      'num_accesses'    => $data['num_accesses'] + 1,
    );
  }
  else {
    $data = array(
      'path'            => $params['path'],
      'bytes_max'       => $params['mem'],
      'bytes_avg'       => $params['mem'],
      'millisecs_max'   => $params['timer'],
      'millisecs_avg'   => $params['timer'],
      'query_timer_max' => $params['query_timer'],
      'query_timer_avg' => $params['query_timer'],
      'query_count_max' => $params['query_count'],
      'query_count_avg' => $params['query_count'],
      'num_accesses'    => 1,
      'last_access'     => time(),
    );
  }
  apc_store($key, $data);
}

function performance_log_summary_db($params = array()) {
  $row = db_fetch_object(db_query("SELECT * FROM {performance_summary} WHERE path = '%s'", $params['path']));
  if (!empty($row)) {
    db_query("UPDATE {performance_summary}
      SET last_access = %d,
      num_accesses = num_accesses + 1,
      bytes_max = %d,
      bytes_avg = %d,
      millisecs_max = %d,
      millisecs_avg = %d,
      query_timer_max = %d,
      query_timer_avg = %d,
      query_count_max = %d,
      query_count_avg = %d
      WHERE path = '%s'",
      time(),
      max($params['mem'], $row->bytes_max),
      ($row->bytes_avg + $params['mem']) / 2,
      max($params['timer'], $row->millisecs_max),
      ($row->millisecs_avg + $params['timer']) / 2,
      max($params['query_timer'], $row->query_timer_max),
      ($row->query_timer_avg + $params['query_timer']) / 2,
      max($params['query_count'], $row->query_count_max),
      ($row->query_count_avg + $params['query_count']) / 2,
      $params['path']);
  }
  else {
    // First time we log this path, write fresh values
    db_query("INSERT INTO {performance_summary}
      (path, last_access, num_accesses,
      bytes_max, bytes_avg, millisecs_max, millisecs_avg,
      query_count_max, query_count_avg, query_timer_max, query_timer_avg)
      VALUES
      ('%s', %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)",
      $params['path'],
      time(),
      1,
      $params['mem'],
      $params['mem'],
      $params['timer'],
      $params['timer'],
      $params['query_count'],
      $params['query_count'],
      $params['query_timer'],
      $params['query_timer']
    );
  }
}

function performance_log_details($params = array()) {
  global $user;
  $anon = ($user->uid) ? FALSE : TRUE;
  db_query("INSERT INTO {performance_detail} (path, anon, bytes, millisecs, timestamp, query_timer, query_count, data) VALUES ('%s', %d, %d, %d, %d, %d, %d, '%s')",
    $params['path'],
    $anon,
    $params['mem'],
    $params['timer'],
    time(),
    $params['query_timer'],
    $params['query_count'],
    $params['data']
  );
}

function performance_apc_list_all() {
  $key_list = array();
  $list = apc_cache_info('user');
  foreach ($list['cache_list'] as $cache_id => $cache_data) {
    $regex = '/^'. PERFORMANCE_KEY .'/';
    if (preg_match($regex, $cache_data['info'])) {
      $key_list[] = $cache_data['info'];
    }
  }
  return $key_list;
}

function performance_view_summary() {
  $sum = array();
  $sum[] = variable_get('performance_summary_db', 0);
  $sum[] = variable_get('performance_summary_apc', 0);
  $go = array_sum($sum);

  if (!$go) {
    return t('Summary performance log is not enabled. Go to the <a href="@link">settings page</a> to enable it.', array('@link' => url('admin/settings/performance_logging')));
  }

  $header = array();

  $header[] =  array('data' => t('Path'),               'field' => 'path');
  $header[] =  array('data' => t('Last access'),        'field' => 'last_access');
  $header[] =  array('data' => t('# accesses'),         'field' => 'num_accesses');
  $header[] =  array('data' => t('Max Memory (MB)'),    'field' => 'bytes_max');
  $header[] =  array('data' => t('Avg Memory (MB)'),    'field' => 'bytes_avg');
  $header[] =  array('data' => t('Milliseconds (Max)'), 'field' => 'millisecs_max');
  $header[] =  array('data' => t('Milliseconds (Avg)'), 'field' => 'millisecs_avg');

  if (variable_get('dev_query', 0)) {
    $header[] = array('data' => t('Query Millisecs (Max)'), 'field' => 'query_timer_max');
    $header[] = array('data' => t('Query Millisecs (Avg)'), 'field' => 'query_timer_avg');
    $header[] = array('data' => t('Query Count (Max)'),     'field' => 'query_count_max');
    $header[] = array('data' => t('Query Count (Avg)'),     'field' => 'query_count_avg');
  }

  $total_rows = $shown = $last_max = $total_bytes = $total_millisecs = $total_accesses = 0;
  $last_min = time();

  $threshold = variable_get('performance_threshold_accesses', 0);

  if (variable_get('performance_summary_apc', 0) && function_exists('apc_cache_info')) {
    // Get the data from the APC cache
    foreach (performance_apc_list_all() as $key) {
      $data_list[] = apc_fetch($key);
    }
  }
  else {
    // Get the data form the database table
    $sql = "SELECT * FROM {performance_summary}";
    $tablesort = tablesort_sql($header);
    $result = pager_query($sql . $tablesort, 50);
    while ($row = db_fetch_array($result)) {
      $data_list[] = $row;
    }
  }

  foreach ($data_list as $data) {
    $total_rows++;
    $last_max = max($last_max, $data['last_access']);
    $last_min = min($last_min, $data['last_access']);

    // Calculate running averages
    $total_bytes += $data['bytes_avg'];
    $total_millisecs += $data['millisecs_avg'];
    $total_accesses += $data['num_accesses'];

    $row_data = array();

    if ($data['num_accesses'] > $threshold) {
      $shown++;
      $row_data[] = $data['path'];
      $row_data[] = format_date($data['last_access'], 'small');
      $row_data[] = $data['num_accesses'];
      $row_data[] = number_format($data['bytes_max']/1024/1024, 2);
      $row_data[] = number_format($data['bytes_avg']/1024/1024, 2);
      $row_data[] = number_format($data['millisecs_max'], 1);
      $row_data[] = number_format($data['millisecs_avg'], 1);
      if (variable_get('dev_query', 0)) {
        $row_data[] = number_format($data['query_timer_max'], 1);
        $row_data[] = number_format($data['query_timer_avg'], 1);
        $row_data[] = $data['query_count_max'];
        $row_data[] = $data['query_count_avg'];
      }
    }
    $rows[] = array('data' => $row_data);
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No statistics available yet.'), 'colspan' => count($header)));
  }

  $output = '';
  if ($threshold) {
    $output .= t('Showing !shown paths with more than !threshold accesses, out of !total total paths.',
      array('!threshold' => $threshold, '!shown' => $shown, '!total' => $total_rows)) .'<br/>';
  }
  else {
    $output .= t('Showing all !total paths.', array('!total' => $total_rows)) .'<br/>';
  }

  // Protect against divide by zero
  if ($total_rows > 0) {
    $mb_avg = number_format($total_bytes/$total_rows/1024/1024, 1);
    $ms_avg = number_format($total_millisecs/$total_rows, 2);
  }
  else {
    $mb_avg = 'n/a';
    $ms_avg = 'n/a';
  }

  $output .= t('Average memory per page: !mb_avg MB', array('!mb_avg' => $mb_avg)) .'<br/>';
  $output .= t('Average milliseconds per page: !ms_avg', array('!ms_avg' => $ms_avg)) .'<br/>';
  $output .= t('Total number of page accesses: !accesses', array('!accesses' => $total_accesses)) .'<br/>';
  $output .= t('First access: !access.', array('!access' => format_date($last_min, 'small'))) .'<br/>';
  $output .= t('Last access: !access.',  array('!access' => format_date($last_max, 'small'))) .'<br/>';

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

function performance_view_details() {
  if (!variable_get('performance_detail', 0)) {
    return t('Detail performance log is not enabled. Go to the <a href="@link">settings page</a> to enable it.', array('@link' => url('admin/settings/performance_logging')));
  }

  $header = array(
    array('data' => t('#'),                    'field' => 'pid', 'sort' => 'desc'),
    array('data' => t('Date'),                 'field' => 'timestamp'),
    array('data' => t('Path'),                 'field' => 'path'),
    array('data' => t('Memory (MB)'),          'field' => 'bytes'),
    array('data' => t('Milliseconds (Total)'), 'field' => 'millisecs'),
    array('data' => t('Anonymous?'),           'field' => 'anon'),
  );

  if (variable_get('dev_query', 0)) {
    $header[] = array('data' => t('# Queries'),          'field' => 'query_count');
    $header[] = array('data' => t('Query Milliseconds'), 'field' => 'query_timer');
  }

  $sql = "SELECT * FROM {performance_detail}";
  $tablesort = tablesort_sql($header);
  $result = pager_query($sql . $tablesort, 50);

  while ($data = db_fetch_array($result)) {
    $row_data = array();

    $row_data[] = $data['pid'];
    $row_data[] = format_date($data['timestamp'], 'small');
    $row_data[] = $data['path'];
    $row_data[] = number_format($data['bytes']/1024/1024, 2);
    $row_data[] = $data['millisecs'];
    $row_data[] = ($data['anon']) ? t('Yes') : t('No');

    if (variable_get('dev_query', 0)) {
      $row_data[] = $data['query_count'];
      $row_data[] = $data['query_timer'];
    }

    $rows[] = array('data' => $row_data);
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => count($header)));
  }

  $output  = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

function performance_cron() {
  // One day ago ...
  $timestamp = time() - 24*60*60;

  performance_cron_db_prune($timestamp);
  performance_cron_apc_prune($timestamp);
}

function performance_cron_db_prune($timestamp = 0) {
  // Remove rows which have not been accessed since a certain timestamp
  db_query("DELETE FROM {performance_summary} WHERE last_access <= %d", $timestamp);

  // Remove performance_detail rows on a daily basis
  db_query("DELETE FROM {performance_detail} WHERE timestamp <= %d", $timestamp);
}

function performance_cron_apc_prune($timestamp = 0) {
  if (!function_exists('apc_cache_info')) {
    // APC not enabled, nothing to do ...
    return;
  }

  // Get all entries in APC's user cache
  $list = performance_apc_list_all();
  if (!count($list)) {
    // Nothing stored yet
    return;
  }

  foreach ($list as $key) {
    if ($data = apc_fetch($key)) {
      if ($data['last_access'] <= $timestamp) {
        apc_delete($key);
      }
    }
  }
}

function performance_clear_apc_confirm() {
  $form['confirm'] = array(
    '#value' => t('Confirm APC clear'),
  );
  return confirm_form(
    $form,
    t('Are you sure you want to clear the APC statistics for this site?'),
    'admin/settings/performance_logging',
    t('This will clear all the collected performance statistics stored in APC. This action cannot be undone.'),
    t('Clear'),
    t('Cancel'));
}

function performance_clear_apc_confirm_submit($form, &$form_state) {
  if (!function_exists('apc_cache_info')) {
    drupal_set_message(t('APC is not enabled. Nothing to do ...'), 'status', FALSE);
    drupal_goto('admin/settings/performance');
    return;
  }

  $list = performance_apc_list_all();
  if (!count($list)) {
    // Nothing stored yet
    return;
  }

  foreach ($list as $key) {
    if ($data = apc_fetch($key)) {
      apc_delete($key);
    }
  }

  drupal_set_message(t('Performance statistics collected in APC has been cleared.'), 'status', FALSE);
  drupal_goto('admin/settings/performance');
}

/**
 * Implementation of hook_nagios_info().
 */
function performance_nagios_info() {
  return array(
    'name'   => 'Performance logging',
    'id'     => 'PERF',
  );
}

/**
 * Implementation of hook_nagios().
 */
function performance_nagios() {
  $info = performance_nagios_info();
  $id = $info['id'];

  // Find out if we have what we need enabled
  $sum = array();

  $sum[] = variable_get('performance_summary_db', 0);
  $sum[] = variable_get('performance_summary_apc', 0);
  $go = array_sum($sum);

  if (!$go) {
    return array(
      $id => array(
        'status' => NAGIOS_STATUS_UNKNOWN,
        'type'   => 'perf',
        'text'   => t('Performance logging is not enabled'),
      ),
    );
  }

  // Initialize variables
  $total_rows = $total_bytes = $total_millisecs = $total_accesses = $total_query_time = $total_query_count = 0;

  // Check which data store to use
  if (variable_get('performance_summary_apc', 0) && function_exists('apc_cache_info')) {
    // Get the data from the APC cache
    foreach (performance_apc_list_all() as $key) {
      $data_list[] = apc_fetch($key);
    }
  }
  else {
    // Get the data form the database table for URLs that have been accessed in the last 15 minutes
    $result = db_query("SELECT * FROM {performance_summary} WHERE last_access >= %d", time() - 15*60);
    while ($row = db_fetch_array($result)) {
      $data_list[] = $row;
    }
  }

  foreach ($data_list as $data) {
    $total_rows++;

    // Calculate running averages
    $total_bytes       += $data['bytes_avg'];
    $total_millisecs   += $data['millisecs_avg'];
    $total_accesses    += $data['num_accesses'];
    $total_query_time  += $data['query_timer_avg'];
    $total_query_count += $data['query_count_avg'];
  }

  // Protect against divide by zero
  if ($total_rows > 0) {
    $ms_avg      = number_format($total_millisecs   / $total_rows, 1, '.', '');
    $ms_query    = number_format($total_query_time  / $total_rows, 1, '.', '');
    $query_count = number_format($total_query_count / $total_rows, 2, '.', '');
    $mb_avg      = number_format($total_bytes       / $total_rows/1024/1024, 1);
  }
  else {
    $ms_avg = '';
    $ms_query = '';
    $mb_avg = '';
    $query_count = '';
  }

  $status = NAGIOS_STATUS_OK;

  return array(
    'ACC' => array(
      'status' => $status,
      'type'   => 'perf',
      'text'   => $total_accesses,
    ),
    'MS' => array(
      'status' => $status,
      'type'   => 'perf',
      'text'   => $ms_avg,
    ),
    'MMB' => array(
      'status' => $status,
      'type'   => 'perf',
      'text'   => $mb_avg,
    ),
    'QRC' => array(
      'status' => $status,
      'type'   => 'perf',
      'text'   => $query_count,
    ),
    'QRT' => array(
      'status' => $status,
      'type'   => 'perf',
      'text'   => $ms_query,
    ),
  );
}

