<?php
// $Id: contemplate.module,v 1.8.4.61 2009/05/11 21:20:54 jrglasgow Exp $
// by Jeff Robbins - Lullabot - www.lullabot.com

define('CONTEMPLATE_TEASER_ENABLED', 0x0001);
define('CONTEMPLATE_BODY_ENABLED', 0x0002);
define('CONTEMPLATE_RSS_ENABLED', 0x0004);

/**
 * @file
 * Create templates to customize teaser and body content.
 */

/**
 * Implementation of hook_help().
 */
function contemplate_help($path, $arg) {
  switch ($path) {
    case 'admin/content/node-type/'. $arg[3] .'/template':
      return t('<p>Enable the textareas by enabling the checkbox above each. Expand the variables section to display. Then click on content attributes to insert the appropriate PHP <code>print</code> statements at your cursor position in the textarea.</p><p>It is also possible to create disk-based templates.') .
        (module_exists('help')
          ? t('Find more information about that <a href="!link">here</a>', array('!link' => url('admin/help/contemplate', array('fragment' => 'disk-based'))))
          : t('For help on this enable the \'help\' module, and you will find a link here.')) .
        t('<p>Please note that by creating a template for this content type, you are taking full control of its output and you will need to manually add all of the fields that you would like to see in the output. Click <em>reset</em> to remove template control for this content type.</p>') . (module_exists('help') ? theme('more_help_link', url('admin/help/contemplate')) : '');
    case 'admin/help#contemplate':
      return t(
        '<p>The Content Templates (a.k.a. contemplate) module allows modification of the teaser and body fields using administrator defined templates. These templates use PHP code and all of the node object variables are available for use in the template. An example node object is displayed and it is as simple as clicking on its properties to add them to the current template.</p>'.
        '<p>This module was written to solve a need with the Content Construction Kit (CCK), where it had a tendency toward outputting content in a not-very-pretty way. And as such, it dovetails nicely with CCK, adding a "template" tab to CCK content-type editing pages and pre-populating the templates with CCK\'s default layout. This makes it easy to rearrange fields, output different fields for teaser and body, remove the field title headers, output fields wrapped for use with tabs.module (part of JSTools), or anything you need.</p>'.
        '<p>But Content Templates can actually be used on any content type and allows modification of the teaser and body properties before they go out in an RSS feed or are handed off to the theme.</p>'.
        '<h3>Creating templates</h3>'.
        '<p>Enter PHP code similar to <a href="http://drupal.org/node/11816">PHPTemplate</a>. The main difference is that you only have access to the $node object. However, PHPTemplate templates only affect output to the page. Contemplate affects display in all site themes as well as RSS feeds and search results.</p>'.
        '<h3 id="disk-based">Disk-based templates</h3>'.
        '<p>It is also possible to create disk-based template files. To do this, copy the contents of a contemplate textarea and paste it into a file called "node-<em>nodetype</em>-<em>field</em>.tpl.php" where <em>nodetype</em> is the content type and <em>field</em> is either "body", "teaser", or "rss". It is also possible to create a template called "node-<em>nodetype</em>.tpl.php" which will affect all cases, and "node.tpl.php" which will affect all node types.</p>'.
        '<p>Place these files into a directory called "contemplates" inside of either your "sites/all" directory or "sites/<em>yoursite</em>" depending on your setup. It is also possible to have multiple "contemplate" directories with "sites/all/contemplates" being the fallback for templates the contemplate does not find in the more specific site directory.</p>'.
        '<p>When adding or removing template files, you will need to visit the <a href="!link">Content Templates admin page</a> to refresh the template list cache. You do not need to do this again when making changes to the content of the templates.</p>',
        array('!link' => url('admin/content/types/templates')));
  }
}

/**
 * Menu callback; loads a flexifilter object
 */
function contemplate_node_type_load($index, $map_array) {
  $types = node_get_types();
  $type = $map_array[$index];
  if (!$types[$type]) { // if the argument isn't a valid node type, return FALSE
    return FALSE;
  }
  else {
    return $type;
  }
}

/**
 * Implementation of hook_menu().
 */
function contemplate_menu() {
  $items = array();
  $items['admin/content/types/templates'] = array(
    'title' => 'Content Templates',
    'description' => 'Create templates to customize output of teaser and body content.',
    'page callback' => 'contemplate_edit_type',
    'access arguments' => array('administer templates'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
  );
  $items['admin/content/templates'] = array (
    'title' => 'Content Templates',
    'description' => 'Create templates to customize output of teaser and body content.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/content/types/templates'),
    'access arguments' => array('administer templates'),
  );
  $node_types = node_get_types();
  foreach ($node_types as $type) {
    $items['admin/content/node-type/'. $type->type .'/template'] = array(
      'title' => 'Template',
      'page callback' => 'contemplate_edit_type',
      'page arguments' => array(3),
      'access callback' => 'user_access',
      'access arguments' => array('administer templates'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 7,
    );
  }
  $items['admin/settings/contemplate'] = array(
    'title' => 'Content Template Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contemplate_system_settings'),
    'access arguments' => array('administer templates'),
  );
  return $items;
}

function contemplate_system_settings() {
  $form = array();
  $form['contemplate_remove_node_content'] = array(
    '#type' => 'checkbox',
    '#title' => 'Remove $node->content from variable list.',
    '#description' => 'When this is enabled you will not see all available variables while creating/editing content templates. When this is disabled you may have Fatal Errors due to going over PHP memory limit. Even though the contents of $node->content is not displayed in the variable list, they are still avaible to be used in the Content Template, they just overflow PHPs memory limit when used with many CCK Fields.',
  );
  if (variable_get('contemplate_remove_node_content', FALSE)) {
    $form['contemplate_remove_node_content']['#attributes'] = array(
      'checked' => 'true',
    );
  }
  $form['contemplate_max_recursion_depth'] = array(
    '#type' => 'textfield',
    '#title' => 'Max recursion depth',
    '#description' => 'How far into the node object should contemplate look? Having this set too high could cause PHP memory errors. If the above checkbox "Remove $node->content from variable list" is checked this won\'t have much of an affect.',
    '#default_value' => variable_get('contemplate_max_recursion_depth', 10),
    '#size' => 5,
  );
  $form['contemplate_before_search_index'] = array(
    '#type' => 'checkbox',
    '#title' => 'Process template before indexing for search',
    '#description' => 'Do you want to process the template before the nodes are indexed for search?',
  );
  if (variable_get('contemplate_before_search_index', FALSE)) {
    $form['contemplate_before_search_index']['#attributes'] = array(
      'checked' => 'true',
    );
  }
  return system_settings_form($form);
}

/**
 * Implementation of hook_perm().
 *
 */
function contemplate_perm() {
  return array('administer templates');
}

/**
 * Implementation of hook_nodeapi().
 */
function contemplate_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  // added $xml_elements, this will add the ability to add other
  // xml_elements to rss feeds other than just the file enclosure
  // in PHP 4 default variables may not be passed by reference so for PHP 4
  // compatability we need to make sure this variable exists and is passed
  // in for each call to contemplate_eval()
  $xml_elements = array();
  switch ($op) {
    case 'rss item':
      if ($template = contemplate_get_template($node->type)) {
        if (CONTEMPLATE_RSS_ENABLED & $template['flags'] && trim($template['rss'])) { // only if there's content in teaser field
          $rss = contemplate_eval($template['rss'], $node, $xml_elements);
          if (isset($xml_elements)) {
            $return = $xml_elements;
          }
          // set both teaser and body because we don't know how they've set Drupal
          $node->teaser = $rss;
          $node->body = $rss;
          if (trim($template['enclosure'])) {
            if ($file = contemplate_eval_enclosure($template['enclosure'], $node, $xml_elements)) {
              $return[] = array(
                'key' => 'enclosure',
                'attributes' => array(
                  'url' => file_create_url($file->filepath),
                  'length' => $file->filesize,
                  'type' => $file->filemime
                )
              );
            }
          }
          return $return;
        }
      }
      break;

    case 'alter':
      if ($template = contemplate_get_template($node->type)) {
        if ($teaser) {
          if (CONTEMPLATE_TEASER_ENABLED & $template['flags'] && trim($template['teaser'])) { // only if there's content in teaser field
            $node->teaser = contemplate_eval($template['teaser'], $node, $xml_elements);
          }
        }
        elseif (CONTEMPLATE_BODY_ENABLED & $template['flags'] && trim($template['body'])) { // only if there's content in the body field
          $node->body = contemplate_eval($template['body'], $node, $xml_elements);
        }
      }
      break;
    case 'update index':
      if (variable_get('contemplate_before_search_index', FALSE)) {
        contemplate_nodeapi($node, 'alter');
        return $node->body;
      }
      break;
  }
}

/**
 * Admin page... list out the node types
 *
 * @return html Content Template Admin table
 */
function contemplate_admin() {
  $destination = drupal_get_destination();
  contemplate_refresh_files();
  $types = node_get_types();
  $templates = contemplate_get_templates();
  $enabled = t('Enabled: Textfield');
  $disabled = t('Disabled');
  $file = t('Enabled: Disk');
  foreach ($types as $type) {
    $rows[] = array(
      $type->name,
      isset($templates[$type->type]['teaser-enabled']) ? ($templates[$type->type]['teaser-enabled'] ? ($templates[$type->type]['teaser-file'] ? $file : $enabled) : $disabled) : '',
      isset($templates[$type->type]['body-enabled']) ? ($templates[$type->type]['body-enabled'] ? ($templates[$type->type]['body-file'] ? $file : $enabled) : $disabled) : '',
      isset($templates[$type->type]['rss-enabled']) ? ($templates[$type->type]['rss-enabled'] ? ($templates[$type->type]['rss-file'] ? $file : $enabled) : $disabled) : '',
      l(isset($templates[$type->type]) ? t('edit template') : t('create template'), 'admin/content/node-type/'. $type->type .'/template'),
      (isset($templates[$type->type]) ? l(t('delete template'), 'admin/content/node-type/'. $type->type .'/template/delete', array('query' => $destination)) : ''),
    );
  }
  $header = array(
    t('content type'),
    t('Teaser'),
    t('Body'),
    t('RSS'),
    '',
    '',
  );
  return theme('table', $header, $rows);
}

/**
 * Menu Callback
 * Confirm the deletion of the custom Content Template
 *
 * @param string $type
 */
function contemplate_delete_type_form(&$form_state, $type = NULL) {
  $form['type'] = array('#type' => 'value', '#value' => $type);

  return confirm_form($form,
    t('Are you sure you want to delete the template for %type?', array('%type' => $type)),
    isset($_GET['destination']) ? $_GET['destination'] : 'admin/content/types/templates',
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel'));
}

function contemplate_delete_type_form_submit($form, &$form_state) {
  return contemplate_delete($form_state['values']['type']);
}

/**
 * Menu callback
 * Edit the template for a specific node-type
 *
 * @param string $type
 */
function contemplate_edit_type_form(&$form_state, $type = NULL) {
  $example = contemplate_examples($type);

  $template = contemplate_get_template($type);

  $intro = t('<p>An example node has been loaded and its properties appear below. Click on the the property names to add them to your template.</p>');
  $example_help = t('Click property to add to your template. Fields marked with <span style="color:red">**</span> are insecure and need to be wrapped with either <a href="http://api.drupal.org/api/5/function/check_plain">check_plain()</a> or <a href="http://api.drupal.org/api/5/function/check_markup">check_markup()</a>');

  if ($default = contemplate_cck_get_fields($type)) {
    $default_teaser = $default_body = $default;
  }
  else {
    $default_teaser = "<?php print \$teaser ?>\n";
    $default_body = "<?php print \$body ?>\n";
  }

  $form['teaser'] = array(
    '#type' => 'fieldset',
    '#title' => t('Teaser'),
    '#collapsible' => TRUE,
    '#collapsed' => CONTEMPLATE_TEASER_ENABLED & $template['flags'] ? FALSE : TRUE,
  );

  if (empty($template['teaser-file'])) {
    $form['teaser']['teaser-enable'] = array(
      '#type' => 'checkbox',
      '#title' => '<strong>'. t('Affect teaser output') .'</strong>',
      '#default_value' => CONTEMPLATE_TEASER_ENABLED & $template['flags'] ? TRUE : FALSE,
      '#attributes' => array('toggletarget' => '#edit-teaserfield'),
    );
    $form['teaser']['teaserfield'] = array(
      '#type' => 'textarea',
      '#title' => t('Teaser Template'),
      '#default_value' => !empty($template['teaser']) ? $template['teaser'] : $default_teaser,
      '#rows' => 15,
      '#description' => t('Leave this field blank to leave teaser unaffected.'),
      '#prefix' => '<div class="contemplate-input">',
      '#suffix' => '</div>',
      '#attributes' => ((CONTEMPLATE_TEASER_ENABLED & $template['flags']) ? '' : array('disabled' => 'true')),
    );
  }
  else {
    $form['teaser']['teaserfield'] = array(
      '#value' => t('<p>This template is being read from<br />%file<br />Please make changes to this file or remove it to continue editing here.</p>', array('%file' => $template['teaser-file']->filename)),
    );
  }

  $form['teaser']['teaser_example'] = array(
    '#type' => 'fieldset',
    '#title' => t('Teaser Variables'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['teaser']['teaser_example']['example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="contemplate-tips form-item"><div id="edit-teaserfield-keys" class="contemplate-scroller resizable">'. $intro . $example['teaser'] .'</div><div class="description">'. $example_help .'</div></div>'
  );

  $form['body'] = array(
    '#type' => 'fieldset',
    '#title' => t('Body'),
    '#collapsible' => TRUE,
    '#collapsed' => CONTEMPLATE_BODY_ENABLED & $template['flags'] ? FALSE : TRUE,
  );

  if (empty($template['body-file'])) {
    $form['body']['body-enable'] = array(
      '#type' => 'checkbox',
      '#title' => '<strong>'. t('Affect body output') .'</strong>',
      '#default_value' => CONTEMPLATE_BODY_ENABLED & $template['flags'] ? TRUE : FALSE,
      '#attributes' => array('toggletarget' => '#edit-bodyfield'),
    );

    $form['body']['bodyfield'] = array(
      '#type' => 'textarea',
      '#title' => t('Body Template'),
      '#default_value' => !empty($template['body']) ? $template['body'] : $default_body,
      '#rows' => 15,
      '#description' => t('Leave this field blank to leave body unaffected.'),
      '#prefix' => '<div class="contemplate-input">',
      '#suffix' => '</div>',
      '#attributes' => ((CONTEMPLATE_BODY_ENABLED & $template['flags']) ? '' : array('disabled' => 'true')),

    );
  }
  else {
    $form['body']['bodyfield'] = array(
      '#value' => t('<p>This template is being read from<br />%file<br />Please make changes to this file or remove it to continue editing here.</p>', array('%file' => $template['body-file']->filename)),
    );
  }

  $form['body']['body_example'] = array(
    '#type' => 'fieldset',
    '#title' => t('Body Variables'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['body']['body_example']['example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="contemplate-tips form-item"><div id="edit-bodyfield-keys" class="contemplate-scroller resizable">'. $intro . $example['body'] .'</div><div class="description">'. $example_help .'</div></div>'
  );

  /* START RSS STUFF */

  $form['rss'] = array(
    '#type' => 'fieldset',
    '#title' => t('RSS'),
    '#collapsible' => TRUE,
    '#collapsed' => CONTEMPLATE_RSS_ENABLED & $template['flags'] ? FALSE : TRUE,
  );

  if (empty($template['rss-file'])) {
    $form['rss']['rss-enable'] = array(
      '#type' => 'checkbox',
      '#title' => '<strong>'. t('Affect RSS output') .'</strong>',
      '#default_value' => CONTEMPLATE_RSS_ENABLED & $template['flags'] ? TRUE : FALSE,
      '#attributes' => array('toggletarget' => '#edit-rss'),
      '#description' => t('Note that if you do not enable this, Drupal will use either the teaser or body as specified in your <a href="@url">RSS publishing settings</a>.', array('@url' => url('admin/content/rss-publishing'))),
    );

    $form['rss']['rssfield'] = array(
      '#type' => 'textarea',
      '#title' => t('RSS Template'),
      '#default_value' => !empty($template['rss']) ? $template['rss'] : $default_body,
      '#rows' => 15,
      '#description' => t('Leave this field blank to leave RSS unaffected. To add <a href="!link">XML elements</a> create an array $xml_elements.', array('!link' => 'http://api.drupal.org/api/function/format_xml_elements/6')),
      '#prefix' => '<div class="contemplate-input">',
      '#suffix' => '</div>',
      '#attributes' => ((CONTEMPLATE_RSS_ENABLED & $template['flags']) ? '' : array('disabled' => 'true')),
    );
  }
  else {
    $form['rss']['rssfield'] = array(
      '#value' => t('<p>This template is being read from<br />%file<br />Please make changes to this file or remove it to continue editing here.</p>', array('%file' => $template['rss-file']->filename)),
    );
  }

  $form['rss']['rss_example'] = array(
    '#type' => 'fieldset',
    '#title' => t('RSS Variables'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['rss']['rss_example']['example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="contemplate-tips form-item"><div id="edit-rss-keys" class="contemplate-scroller resizable">'. $intro . $example['rss'] .'</div><div class="description">'. $example_help .'</div></div>'
  );

  $form['rss'][] = array(
    '#type' => 'markup',
    '#value' => '<div style="clear:both"></div>',
  );

  global $_contemplate_fids;

  if (is_array($_contemplate_fids)) {
    $_contemplate_fids = drupal_map_assoc(array_unique($_contemplate_fids));
    $_contemplate_fids = array(0 => t('&lt;none&gt; (other modules may add)')) + $_contemplate_fids;
    $form['rss']['enclosure'] = array(
      '#type' => 'radios',
      '#title' => t('RSS enclosures'),
      '#options' => $_contemplate_fids,
      '#default_value' => !empty($template['enclosure']) ? $template['enclosure'] : '',
    );
  }

  /* END RSS STUFF */

  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#attributes' => array('onclick' => 'return(confirm("'. t("Are you sure you want to reset this form?\\nAny customizations will be lost.") .'"));'),
  );
  return $form;
}

function contemplate_edit_type($type = NULL) {
  $types = node_get_types();

  if (empty($types[$type])) { // if the argument isn't a valid node type, output admin page
    return contemplate_admin();
  }
  drupal_set_title(t('Template for %type', array('%type' => $types[$type]->name)));
  if (arg(0) == 'admin' && arg(1) == 'content' && arg(4) == 'template') {
    $breadcrumbs = drupal_get_breadcrumb();
    $type_crumb = array_pop($breadcrumbs);
    array_push($breadcrumbs, l(t('Templates'), 'admin/content/types/templates'), $type_crumb);
    drupal_set_breadcrumb($breadcrumbs);
  }
  if (arg(5) == 'delete') {
    return drupal_get_form('contemplate_delete_type_form', $type);
  }
  else {
    contemplate_refresh_files();
    return drupal_get_form('contemplate_edit_type_form', $type);
  }
}

/**
 * Get a single template
 *
 * @return array template
 */
function contemplate_get_template($type) {
  //only load each template once per page hit
  static $types = array();

  if (!isset($types[$type])) {

    // first check to see what's stored in the contemplate table
    $types[$type] = db_fetch_array(db_query("SELECT * FROM {contemplate} WHERE type = '%s'", $type));
    if (empty($types[$type])) {
      $types[$type] = array('flags' => 0);
    }
    // now check to see if there are files
    $fields = array(
      'teaser' => CONTEMPLATE_TEASER_ENABLED,
      'body' => CONTEMPLATE_BODY_ENABLED,
      'rss' => CONTEMPLATE_RSS_ENABLED
    );
    foreach ($fields as $field => $enable) {
      if ($file = contemplate_get_file($type, $field)) {
        $types[$type][$field] = $file->contents;
        $types[$type][$field .'-file'] = $file;
        $types[$type]['flags'] |= $enable; // if there is a file, the field is always enabled...
      }
      $types[$type][$field .'-enabled'] = $types[$type]['flags'] & $enable ? TRUE : FALSE;
    }
  }
  return $types[$type];
}

/**
 * Get all of the current templates
 * Only used on admin page
 *
 * @return unknown
 */
function contemplate_get_templates() {
  foreach (node_get_types() AS $r) {
    /*
    $templates[$r->type]['teaser'] = $r->teaser;
    $templates[$r->type]['body'] = $r->body;
    $templates[$r->type]['rss'] = $r->rss;
    $templates[$r->type]['enclosure'] = $r->enclosure;
    */
    $templates[$r->type] = contemplate_get_template($r->type);
  }
  return $templates;
}

function contemplate_edit_type_form_submit($form, &$form_state) {
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  if ($op == t('Delete')) {
    contemplate_delete($form_state['values']['type']);
    drupal_set_message(t('%type template has been reset.', array('%type' => drupal_ucfirst($form_state['values']['type']))));
  }
  else {
    contemplate_save($form_state);
    drupal_set_message(t('%type template saved.', array('%type' => drupal_ucfirst($form_state['values']['type']))));
  }
}

function contemplate_save($edit) {
  $type = $edit['values']['type'];
  $teaserfield = !empty($edit['values']['teaserfield']) ? $edit['values']['teaserfield'] : '';
  $bodyfield = !empty($edit['values']['bodyfield']) ? $edit['values']['bodyfield'] : '';
  $rssfield = !empty($edit['values']['rssfield']) ? $edit['values']['rssfield'] : '';
  $enclosure = !empty($edit['values']['enclosure']) ? $edit['values']['enclosure'] : '';
  $flags |= !empty($edit['values']['teaser-enable']) ? CONTEMPLATE_TEASER_ENABLED : 0;
  $flags |= !empty($edit['values']['body-enable']) ? CONTEMPLATE_BODY_ENABLED : 0;
  $flags |= !empty($edit['values']['rss-enable']) ? CONTEMPLATE_RSS_ENABLED : 0;

  contemplate_delete($type);
  $sql = "INSERT INTO {contemplate} (type, teaser, body, rss, enclosure, flags) VALUES ('%s', '%s', '%s', '%s', '%s', %d)";
  return db_query($sql, $type, $teaserfield, $bodyfield, $rssfield, $enclosure, $flags);

}

function contemplate_delete($type) {
  return db_query("DELETE FROM {contemplate} WHERE type='%s'", $type);
}

/**
 * List the available template files
 *
 * @return
 * array of template file information
 */
function contemplate_available_files() {
  static $data;
  if (!isset($data)) {
    $conf = conf_path();
    $data = unserialize(db_result(db_query("SELECT data FROM {contemplate_files} WHERE site = '%s'", $conf)));
  }
  return $data;
}

/**
 * Refresh the listing of template files
 * for the current site
 *
 * This gets refreshes the file listing whenever a ConTemplate admin screens is called
 *
 */
function contemplate_refresh_files() {
  $data = drupal_system_listing('\.tpl\.php$', 'contemplates', 'name', 0);
  $conf = conf_path();
  db_query("DELETE FROM {contemplate_files} WHERE site = '%s'", $conf);
  db_query("INSERT INTO {contemplate_files} (site, data) VALUES ('%s', '%s')", $conf, serialize($data));
}


/**
 * Given a node type and field type, return the content of the most specific file
 *
 * @param string $node_type
 * type of node
 *
 * @param string $field
 * field type we're looking for
 * possible values are 'body', 'teaser', and 'rss'
 *
 * @return
 * either path to the most specific file (string)
 * or FALSE if no file is found
 *
 */
function contemplate_get_file($node_type, $field) {
  $files = contemplate_available_files();
  if (isset($files['node-'. $node_type .'-'. $field .'.tpl'])) {
    $file = $files['node-'. $node_type .'-'. $field .'.tpl'];
  }
  elseif (isset($files['node-'. $node_type .'.tpl'])) {
    $file = $files['node-'. $node_type .'.tpl'];
  }
  elseif (isset($files['node.tpl'])) {
    $file = $files['node.tpl'];
  }

  if (isset($file) && $file) {
    $file->contents = file_get_contents($file->filename);
    $return = $file;
  }
  else {
    $return = FALSE;
  }
  return $return;
}


/**
 * Load an example node and display its parts
 * - used only on template edit page
 *
 * @param $type
 *   node type
 * @return array
 */
function contemplate_node_views($type) {
  // get the nid of the latest node of this type
  $nid = db_result(db_query("SELECT nid FROM {node} WHERE type = '%s' ORDER BY created DESC", $type));
  if ($nid) {
    $bodynode = contemplate_node_view(node_load($nid), FALSE, TRUE);
    $teasernode = contemplate_node_view(node_load($nid), TRUE, FALSE);
    return array('body' => $bodynode, 'teaser' => $teasernode);
  }
  else {
    return FALSE;
  }
}

/**
 * Load an example node and display its parts
 * - used only on template edit page
 *
 * @param $type
 *   node type
 * @return
 *   an array containing the 'rss', 'body' and 'teaser'
 *   versions of the node
 */
function contemplate_examples($type) {
  $path = drupal_get_path('module', 'contemplate');
  drupal_add_js($path .'/contemplate.js');
  drupal_add_js($path .'/divresizer.js');
  drupal_add_css($path .'/contemplate.css');
  $recursion_limit_hit = 0;
  if ($views = contemplate_node_views($type)) {
    $boutput = contemplate_array_variables((array)$views['body'], 'bodyfield', FALSE, FALSE, 0, $recursion_limit_hit);
    $toutput = contemplate_array_variables((array)$views['teaser'], 'teaserfield', FALSE, FALSE, 0, $recursion_limit_hit);
    $routput = contemplate_array_variables((array)$views['teaser'], 'rss', FALSE, FALSE, 0, $recursion_limit_hit);
  }
  else {
    $error = t('No %type content items exist to use as an example. Please create a %type item and then come back here to see an output of its parts.', array('%type' => $type));
    $toutput = $boutput = $routput = $error;
  }
  if ($recursion_limit_hit) {
    $message = t('While traversing node variables your recursion limit of %limit was hit %recursion_limit_hit times. For more information about this error goto '. l('http://drupal.org/node/230885', 'http://drupal.org/node/230885') .'. This situation will not effect the operation of Content Template, but it may not show you all available variables on this page. This message will only appear on this page.', array('%limit' => variable_get('contemplate_max_recursion_depth', 10), '%recursion_limit_hit' => $recursion_limit_hit));
    if (variable_get('error_level', 1)) {
      drupal_set_message($message, 'warning');
    }
    watchdog('contemplate', $message, array(), WATCHDOG_ALERT);
  }
  return array('body' => $boutput, 'teaser' => $toutput, 'rss' => $routput);
}


/**
 * Recursive (and therefore magical) function goes through node object returns
 * html representation of the node strings are clickable and insert into
 * teaser/body fields
 *
 * @param $array
 *   array to recurse through
 * @param $target
 *   target field for javascript insert
 * @param $parents
 *   used by recursion
 * @param $object
 *   used by recursion
 * @return string - html dictionary list of $node elements
 */
function contemplate_array_variables($array, $target, $parents = FALSE, $object = FALSE, $depth = 0, &$recursion_limit_hit) {
  global $_contemplate_fids;

  if ($depth >= variable_get('contemplate_max_recursion_depth', 10)) {
    #drupal_set_message(t('Contemplate exceeded max recursion depth. There are more variables available that have not been listed.'), 'error');
    $recursion_limit_hit++;
    return '';
  }
  /**
   * CCK fields are causing problems, they are added into the original array as $array['field_*']=>array();
   * and they are also added into $array['content']['field_*']=>array() this array has not only
   * the information for the CCK field, but also information for the whole node , even itself,
   * $array['content']['field_*']['#node'] recursively, this leads to memory issues while traversing
   * the array recursively
   * Drupal 6
   */
  if (isset($array['content']) && ($parents == FALSE) && ($object == FALSE)) {
    // by default we will remove the content array, the user can choose to have this not done
    if (variable_get('contemplate_remove_node_content', FALSE)) {
      unset($array['content']);
    }
  }

  //  if $array['#node'] exists we need to remove it to prevent recursion and PHP Fatal errors on Memory Limit
  if (isset($array['#node'])) {
    #unset($array['#node']);
    $array['#node'] = "\n ** RECURSION **";
  }

  if (is_object($array)) {
    $array = (array)$array;
  }
  if (is_array($array)) {
    $output = "<dl>\n";
    foreach ($array as $field => $value) {
      if ($parents) {
        if ($object) {
          $field = $parents .'->'. $field;
        }
        else {
          if (is_int($field)) {
            $field = $parents .'['. $field .']';
          }
          else {
            if ($field == 'fid') { // make a note of the fields named "fid"
              $_contemplate_fids[] = "\$node->". $parents .'[\''. $field .'\']';
            }
            $field = $parents .'[\''. $field .'\']';
          }
        }
      }

      $type = '';
      if (!is_string($value)) {
        $type = ' ('. gettype($value) .')';
      }

      if (!is_array($value) && !is_object($value)) {
        if ($field == 'title' || (drupal_substr($field, -9) == "['value']")) {
          $security = t(' <span style="color:red;font-weight:bold">**</span>');
          $insert = "'<?php print check_plain(\$node->". addslashes($field) .") ?>'";
        }
        else {
          $security = '';
          $insert = "'<?php print \$node->". addslashes($field) ." ?>'";
        }

        $output .= "<dt><a href=\"#\" onclick=\"insertAtCursor(document.getElementById('edit-$target'), $insert);return FALSE;\" title=\"insert this variable into $target\">\$node->$field</a>{$security}{$type}</dt>\n";
      }
      else {
        $output .= "<dt>\$node->$field$type</dt>\n";
      }

      $output .= "<dd>\n";
      if (is_array($value)) {
        $output .= contemplate_array_variables($value, $target, $field, FALSE, $depth + 1, $recursion_limit_hit);
      }
      elseif (is_object($value)) {
        $output .= contemplate_array_variables((array)$value, $target, $field, TRUE, $depth + 1, $recursion_limit_hit);
      }
      else {
        $value = is_bool($value) ? ($value ? 'TRUE' : 'FALSE') : $value;
        $output .= htmlspecialchars(print_r($value, TRUE)) ."\n";
      }
      $output .= "</dd>\n";
    }
    $output .= "</dl>\n";
  }
  return $output;
}

/**
 * Run example node through view hooks to present the node object parts
 *
 * This is an exact copy of node_view() changed just to return the node object rather than the themed node view
 *
 * - used only on the template editing pages
 */
function contemplate_node_view($node, $teaser = FALSE, $page = FALSE, $links = TRUE) {
  $node = (object)$node;

  $node = node_build_content($node, $teaser, $page);

  if ($links) {
    $node->links = module_invoke_all('link', 'node', $node, !$page);
    drupal_alter('link', $node->links, $node);
  }

  // Set the proper node part, then unset unused $node part so that a bad
  // theme can not open a security hole.
  $content = drupal_render($node->content);
  if ($teaser) {
    $node->teaser = $content;
    unset($node->body);
  }
  else {
    $node->body = $content;
    unset($node->teaser);
  }

  // Allow modules to modify the fully-built node.
  node_invoke_nodeapi($node, 'alter', $teaser, $page);

  return $node;
}


/**
 * Copy of drupal_eval(), but extracts the node object so that variables are available to the template
 *
 * @param $tmplt
 *   text
 *   the template code
 * @param $obj
 *   object
 *   an object to extract into the local variables
 * @return
 *   string
 *   executed template code
 */
function contemplate_eval($tmplt, $obj, &$xml_elements) {
  extract((array)$obj);
  $node = $obj;
  ob_start();
  print eval('?>'. $tmplt);
  $output = ob_get_contents();
  ob_end_clean();
  return $output;
}

/**
 * Eval the RSS enclosure field
 */
function contemplate_eval_enclosure($field, $node) {
  $tmplt = '<?php print '. $field .' ?>';
  $xml_elements = array();
  $fid = contemplate_eval($tmplt, $node, $xml_elements);
  if (is_numeric($fid)) {
    $file = db_fetch_object(db_query('SELECT * FROM {files} WHERE fid = %d', $fid));
    return $file;
  }
  return FALSE;
}


function contemplate_cck_get_fields($type_name) {
  if (module_exists('content')) {
    $return = array();

    $type = content_types($type_name);

    if ($type) {
      // if this is a CCK field
      foreach ($type['fields'] as $field_name => $field) {
        $return[] = theme('contemplate_field', $field);
      }
      $return = implode("\n", $return);
    }
    else {
      $return = FALSE;
    }
  }
  else {
    $return = FALSE;
  }
  return $return;
}

/**
 * Implementation of hook_theme().
 */
function contemplate_theme() {
  return array(
    'contemplate_field' => array( 'arguments' => array('element' => NULL) ),
  );
}

/**
 * Rewrite of theme_field to output default CCK output into the template.
 *
 * @return unknown
 */
function theme_contemplate_field(&$field) {
  $output = '<div class="field field-type-'. strtr($field['type'], '_', '-') .' field-'. strtr($field['field_name'], '_', '-') .'">'."\n";
  $output .= '  <h3 class="field-label">'. $field['widget']['label'] .'</h3>'."\n";
  $output .= '  <div class="field-items">'."\n";
  if ($field['multiple']) {
    $output .= '    <?php foreach ((array)$node->'. $field['field_name'] .' as $item) { ?>'."\n";
    $output .= '      <div class="field-item"><?php print $item[\'view\'] ?></div>'."\n";
    $output .= '    <?php } ?>'."\n";
  }
  else {
    $output .= '      <div class="field-item"><?php print $node->'. $field['field_name'] ."[0]['view'] ?></div>\n";
  }
  $output .= '  </div>'."\n";

  $output .= '</div>'."\n";

  return $output;
}
