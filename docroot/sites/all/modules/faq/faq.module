<?php
// $Id: faq.module,v 1.1.4.52.2.95 2009/01/04 20:42:34 snpower Exp $

/**
 * @file
 * The FAQ module allows users to create a FAQ page, with questions and answers
 * displayed in different styles, according to the settings.
 */

/**
 * Implementation of hook_help().
 */
function faq_help($path, $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#faq":
      $output .= '<p>'. t("This module allows users with the 'administer faq' permission to create question and answer pairs which will be displayed on the 'faq' page.  The 'faq' page is automatically generated from the FAQ nodes configured and the layout of this page can be modified on the settings page.  Users will need the 'view faq page' permission in order to view the 'faq' page.") .'</p>'.
        '<p>'. t("To create a question and answer, the user must create a 'FAQ' node (Create content >> FAQ).  This screen allows the user to edit the question and answer text.  If the 'Taxonomy' module is enabled and there are some terms configured for the FAQ node type, it will also be possible to put the questions into different categories when editing.") .'</p>'.
        '<p>'. t("The 'Frequently Asked Questions' settings configuration screen will allow users with 'administer faq' permissions to specify different layouts of the questions and answers.") .'</p>'.
        '<p>'. t("All users with 'view faq page' permissions will be able to view the generated FAQ page at 'www.example.com/faq'.") .'</p>';
      return $output;
    case "admin/modules#description":
      return t("Allows the user to configure the layout of questions and answers on a FAQ page.");
    case "node/add/faq":
      return t("Add a question and answer to a FAQ list.");
  }

}

/**
 * Implementation of hook_perm().
 */
function faq_perm() {
  return array('administer faq', 'view faq page', 'edit own faq', 'edit faq', 'create faq');
}


/**
 * Implementation of hook_access().
 */
function faq_access($op, $node, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = $user;
  }

  if ($op != 'create') {
    $node = (object)$node;
  }
  if ($op == 'create') {
    if (user_access('create faq') || user_access('administer faq')) {
      return TRUE;
    }
  }
  elseif ($op == 'update' || $op == 'delete') {
    if (user_access('edit faq') || user_access('administer faq')) {
      return TRUE;
    }
    elseif (user_access('edit own faq') && $account->uid == $node->uid) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function faq_menu() {
  $items = array();

  $items['faq'] = array(
    'title' => 'Frequently Asked Questions',
    'page callback' => 'faq_page',
    'access callback' => 'user_access',
    'access arguments' => array('view faq page'),
    'weight' => 1
  );
  $items['faq/%'] = array(
    'title' => 'Frequently Asked Questions',
    'page callback' => 'faq_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view faq page'),
  );

  $items['admin/settings/faq'] = array(
    'title' => 'Frequently Asked Questions',
    'description' => 'Allows the user to configure the layout of questions and answers on a FAQ page.',
    'file' => 'faq.admin.inc',
    'page callback' => 'faq_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
  );
  $items['admin/settings/faq/general'] = array(
    'title' => 'General',
    'description' => 'Allows the user to configure the header and descriptive text for the FAQ page.',
    'file' => 'faq.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_general_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/faq/questions'] = array(
    'title' => 'Questions',
    'description' => 'Allows the user to configure the layout of questions and answers on a FAQ page.',
    'file' => 'faq.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_questions_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['admin/settings/faq/categories'] = array(
    'title' => 'Categories',
    'description' => 'Allows the user to configure the layout of questions and answers using categories on a FAQ page.',
    'file' => 'faq.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_categories_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );
  $items['admin/settings/faq/weight'] = array(
    'title' => 'Weight',
    'description' => 'Allows the user to configure the order of questions and answers on a FAQ page.',
    'file' => 'faq.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('faq_weight_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer faq'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );

  return $items;
}

/**
 * Implementation of hook_node_info().
 *
 * Defines the FAQ node/content type.
 * @return
 *   An array, containing the title, module name and the description.
 */
function faq_node_info() {
  return array(
    'faq' => array(
      'name' => t('FAQ'),
      'module' => 'faq',
      'description' => t('A frequently asked question and its answer.'),
      'title_label' => t('Question'),
      'body_label' => t('Answer'),
    )
  );
}

/**
 * Implementation of hook_node_name().
 */
function faq_node_name($node) {
  return t('FAQ');
}

/**
 * Defines the form where new questions and answers are written.
 *
 * @param &$node
 *   The node being added or edited.
 * @param &$param
 *   The hook can set this variable to an associative array of attributes to add
 *   to the enclosing <form> tag.
 * @return
 *   The form elements in the $form array.
 */
function faq_form(&$node, &$param) {
  $type = node_get_types('type', $node);

  // Short question.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#default_value' => $node->title,
    '#required' => TRUE,
    '#weight' => 0,
    '#description' => t('Question to be answered.  This will appear in all question listings, such as the FAQ blocks.'),
  );

  // Detailed question.
  $form['detailed_question'] = array(
    '#type' => 'textarea',
    '#title' => t('Question details (optional)'),
    '#default_value' => $node->detailed_question,
    '#weight' => -1,
    '#rows' => 3,
    '#description' => t('Longer question text.  This will be displayed in all layouts where the answer appears, in addition to the shorter question text.'),
  );

  // Answer.
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  $form['body_field']['body']['#description'] = t('This is that answer to the question.  It will be filtered according to the input format.');

  return $form;
}


/**
 * Inserts the faq node question text into the 'faq_questions' table.
 *
 * @param $node
 *   The node object.
 */
function faq_insert($node) {
  $ret = db_query("INSERT INTO {faq_questions} (nid, vid, question, detailed_question) VALUES(%d, %d, '%s', '%s')", $node->nid, $node->vid, $node->title, $node->detailed_question);
}

/**
 * Updates the faq node question text in the 'faq_questions' table.
 *
 * @param $node
 *   The node object.
 */
function faq_update($node) {
  if ($node->revision) {
    faq_insert($node);
  }
  else {
    db_query("UPDATE {faq_questions} SET question = '%s', detailed_question = '%s' WHERE nid = %d AND vid = %d", $node->title, $node->detailed_question, $node->nid, $node->vid);
    if (!db_affected_rows()) {
      faq_insert($node);
    }
  }
}

/**
 * Deletes an FAQ node from the database.
 *
 * @param &$node
 *   Which node to delete.
 */
function faq_delete(&$node) {
  db_query("DELETE FROM {faq_weights} WHERE nid = '%d'", $node->nid);
  db_query("DELETE FROM {faq_questions} WHERE nid = '%d'", $node->nid);
}

/**
 * Implementation of hook_load().
 *
 * Initialises $node->question using the value in the 'faq_questions' table.
 *
 * @param $node
 *   The node object.
 */
function faq_load($node) {
  $result = db_fetch_object(db_query('SELECT question, detailed_question FROM {faq_questions} WHERE nid = %d AND vid = %d', $node->nid, $node->vid));
  if ($result) {
    $question_length = variable_get('faq_question_length', 'short');
    if ($question_length == 'long' && !empty($result->detailed_question)) {
      $result->title = $result->detailed_question;
    }
    else {
      $result->title = $result->question;
    }
  }
  return $result;
}

/**
 * Implementation of hook_nodeapi().
 */
function faq_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {faq_questions} WHERE nid = %d AND vid = %d', $node->nid, $node->vid);
      break;
  }
}


/**
 * Implementation of hook_view().
 *
 * @param $node
 *   Which node to show.
 * @param $teaser
 *   Boolean variable, if set to TRUE, it will show only a short part of the
 *   content.
 * @param $page
 *   Boolean variable, if set to TRUE, it will setup the breadcrumbs.
 * @return
 *   The node object.
 */
function faq_view($node, $teaser = FALSE, $page = FALSE) {
  drupal_add_css(drupal_get_path('module', 'faq') .'/faq.css');
  $node = node_prepare($node, $teaser);
  $node->detailed_question = check_markup($node->detailed_question, $node->format, FALSE);
  $content = $node->content['body']['#value'];

  $question_length = variable_get('faq_question_length', 'short');
  if (!empty($node->detailed_question) && $question_length == 'both') {
    $node->content['body']['#value'] = '<div class="faq-detailed-question">'. $node->detailed_question .'</div>'. $content;
  }
  return $node;
}

/**
 * Function to display the faq page.
 *
 * @param $tid
 *   Default is 0, determines if the questions and answers on the page
 *   will be shown according to a category or non-categorized.
 * @param $faq_display
 *   Optional parameter to override default question layout setting.
 * @param $category_display
 *   Optional parameter to override default category layout setting.
 * @return
 *   The output variable which contains an HTML formatted page with FAQ
 *   questions and answers.
 */
function faq_page($tid = 0, $faq_display = '', $category_display = '') {
  if (module_exists('pathauto')) {
    _pathauto_include();
  }

  // Things to provide translations for.
  $default_values = array(t('Frequently Asked Questions'), t('Back to Top'), t('Q:'), t('A:'));

  $output = $output_answers = '';
  drupal_add_css(drupal_get_path('module', 'faq') .'/faq.css');
  if (arg(0) == 'faq') {
    drupal_set_title(check_plain(variable_get('faq_title', 'Frequently Asked Questions')));
  }
  if (!module_exists("taxonomy")) {
    $tid = 0;
  }

  // Configure the breadcrumb trail.
  if (!empty($tid) && $current_term = taxonomy_get_term($tid)) {
    if (!drupal_lookup_path('alias', arg(0) .'/'. arg(1)) && module_exists('pathauto')) {
      $placeholders = pathauto_get_placeholders('taxonomy', taxonomy_get_term($tid));
      if ($alias = pathauto_create_alias('faq', 'insert', $placeholders, arg(0) .'/'. arg(1), arg(1))) {
        drupal_goto($alias);
      }
    }
    faq_set_breadcrumb($current_term);
  }


  if (empty($faq_display)) {
    $faq_display = variable_get('faq_display', 'questions_top');
  }
  $use_categories = variable_get('faq_use_categories', FALSE);
  if (!empty($category_display)) {
    $use_categories = TRUE;
  }
  if (!module_exists("taxonomy")) {
    $use_categories = FALSE;
  }

  $faq_path = drupal_get_path('module', 'faq') .'/includes';

  // Non-categorized questions and answers.
  if (!$use_categories) {
    $default_sorting = variable_get('faq_default_sorting', 'DESC');
    $default_weight = 0;
    if ($default_sorting != 'DESC') {
      $default_weight = 1000000;
      $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON w.nid = n.nid WHERE n.type='faq' AND n.status = 1 AND (w.tid = 0 OR w.tid IS NULL) ORDER BY weight, n.sticky DESC, n.created ASC", "n", "nid"), $default_weight);
    }
    else {
      $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON w.nid = n.nid WHERE n.type='faq' AND n.status = 1 AND (w.tid = 0 OR w.tid IS NULL) ORDER BY weight, n.sticky DESC, n.created DESC", "n", "nid"), $default_weight);
    }
    $data = array();
    while ($row = db_fetch_object($result)) {
      $node = node_load($row->nid);
      if (node_access("view", $node)) {
        $data[] = $node;
      }
    }

    switch ($faq_display) {
      case 'questions_top':
        include_once($faq_path .'/faq.questions_top.inc');
        $output = theme('faq_questions_top', $data);
        break;

      case 'hide_answer':
        include_once($faq_path .'/faq.hide_answer.inc');
        $output = theme('faq_hide_answer', $data);
        break;

      case 'questions_inline':
        include_once($faq_path .'/faq.questions_inline.inc');
        $output = theme('faq_questions_inline', $data);
        break;

      case 'new_page':
        include_once($faq_path .'/faq.new_page.inc');
        $output = theme('faq_new_page', $data);
        break;

    } // End of switch.
  }


  // Categorize questions.
  else {
    if (empty($category_display)) {
      $category_display = variable_get('faq_category_display', 'categories_inline');
    }
    $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);
    $output .= "<br />";


    // If we're viewing a specific category/term.
    if (!empty($tid) && $term = taxonomy_get_term($tid)) {
      $title = variable_get('faq_title', 'Frequently Asked Questions');
      if (arg(0) == 'faq' && is_numeric(arg(1))) {
        drupal_set_title(check_plain($title . ($title ? ' - ' : '') . faq_tt("taxonomy:term:$term->tid:name", $term->name)));
      }
      if ($category_display == 'hide_qa') {
        drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');
      }
      _display_faq_by_category($faq_display, $category_display, $term, 0, $output, $output_answers);
      $output = '<div class="content"><div class="faq">'. $output;
      $output .= $output_answers .'</div></div>';
      return $output;
    }


    $list_style = variable_get('faq_category_listing', 'ul');
    $vocabularies = taxonomy_get_vocabularies('faq');
    $vocab_omit = variable_get('faq_omit_vocabulary', array());
    $vocabularies = array_diff_key($vocabularies, $vocab_omit);
    $items = array();
    $vocab_items = array();
    foreach ($vocabularies as $vid => $vobj) {

      if ($category_display == "new_page") {
        $vocab_items = _get_indented_faq_terms($vid, 0);
        $items = array_merge($items, $vocab_items);
      }

      // Not a new page.
      else {
        if ($hide_child_terms && $category_display == 'hide_qa') {
          $tree = taxonomy_get_tree($vid, 0, -1, 1);
        }
        else {
          $tree = taxonomy_get_tree($vid);
        }
        foreach ($tree as $term) {

          switch ($category_display) {

            case 'hide_qa':
              drupal_add_js(drupal_get_path('module', 'faq') .'/faq.js', 'module');


            case 'categories_inline':
              if (taxonomy_term_count_nodes($term->tid, 'faq')) {
                _display_faq_by_category($faq_display, $category_display, $term, 1, $output, $output_answers);
              }
              break;


          } // End of switch (category_display).
        } // End of foreach term.
      } // End of foreach vocab.
    } // End of if $category_display != new_page.

    if ($category_display == "new_page") {
      $output = theme('item_list', $items, NULL, $list_style);
    }
  }

  $desc = '';
  $faq_description = variable_get('faq_description', '');
  $format = variable_get('faq_description_format', 0);
  if ($format) {
    $faq_description = check_markup($faq_description, $format, FALSE);
  }
  if (!empty($faq_description)) {
    $desc = '<div class="faq-description">'. $faq_description ."</div>\n";
  }
  $output = '<div class="content"><div class="faq">'. $desc . $output;
  $output .= $output_answers ."</div></div>\n";

  return $output;
}

/**
 * Display FAQ questions and answers filtered by category.
 *
 * @param $faq_display
 *   Define the way the FAQ is being shown; can have the values:
 *   'questions top',hide answers','questions inline','new page'.
 * @param $category_display
 *   The layout of categories which should be used.
 * @param $term
 *   The category / term to display FAQs for.
 * @param $display_header
 *   Set if the header will be shown or not.
 * @param &$output
 *   Reference which holds the content of the page, HTML formatted.
 * @param &$output_answer
 *   Reference which holds the answers from the FAQ, when showing questions
 *   on top.
 */
function _display_faq_by_category($faq_display, $category_display, $term, $display_header, &$output, &$output_answers) {

  $default_sorting = variable_get('faq_default_sorting', 'DESC');
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
    $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON w.tid = tn.tid AND n.nid = w.nid WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight, n.sticky DESC, n.created ASC", "n", "nid"), $default_weight, $term->tid);
  }
  else {
    $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON w.tid = tn.tid AND n.nid = w.nid WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight, n.sticky DESC, n.created DESC", "n", "nid"), $default_weight, $term->tid);
  }
  $data = array();
  while ($row = db_fetch_object($result)) {
    $node = node_load($row->nid);
    if (node_access("view", $node)) {
      $data[] = $node;
    }
  }


  // Handle indenting of categories.
  $depth = 0;
  if (!isset($term->depth)) $term->depth = 0;
  while ($depth < $term->depth) {
    $display_header = 1;
    $indent = '<div class="faq-category-indent">';
    $output .= $indent;
    $depth++;
  }

  // Set up the class name for hiding the q/a for a category if required.
  $faq_class = "faq-qa";
  if ($category_display == "hide_qa") {
    $faq_class = "faq-qa-hide";
  }

  $faq_path = drupal_get_path('module', 'faq') .'/includes';

  switch ($faq_display) {

    case 'questions_top':
      include_once($faq_path .'/faq.questions_top.inc');
      // @todo fix workaround: have to share result.
      $output .= theme('faq_category_questions_top', $data, $display_header, $category_display, $term, $faq_class, $term);
      $output_answers .= theme('faq_category_questions_top_answers', $data, $display_header, $category_display, $term, $faq_class, $term);
      break;


    case 'hide_answer':
      include_once($faq_path .'/faq.hide_answer.inc');
      $output .= theme('faq_category_hide_answer', $data, $display_header, $category_display, $term, $faq_class, $term);
      break;


    case 'questions_inline':
      include_once($faq_path .'/faq.questions_inline.inc');
      $output .= theme('faq_category_questions_inline', $data, $display_header, $category_display, $term, $faq_class, $term);
      break;


    case 'new_page':
      include_once($faq_path .'/faq.new_page.inc');
      $output .= theme('faq_category_new_page', $data, $display_header, $category_display, $term, $faq_class, $term);
      break;

  } // End of switch (faq_display).


  // Handle indenting of categories.
  while ($depth > 0) {
    $output .= '</div>';
    $depth--;
  }

}

/**
 * Implementation of hook_theme().
 */
function faq_theme() {
  $path = drupal_get_path('module', 'faq') .'/includes';
  return array(
    'faq_questions_top' => array(
      'path' => $path,
      'file' => 'faq.questions_top.inc',
      'template' => 'faq-questions-top',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_questions_top' => array(
      'path' => $path,
      'file' => 'faq.questions_top.inc',
      'template' => 'faq-category-questions-top',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
      ),
    'faq_category_questions_top_answers' => array(
      'path' => $path,
      'file' => 'faq.questions_top.inc',
      'template' => 'faq-category-questions-top-answers',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
      ),
    'faq_hide_answer' => array(
      'path' => $path,
      'file' => 'faq.hide_answer.inc',
      'template' => 'faq-hide-answer',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_hide_answer' => array(
      'path' => $path,
      'file' => 'faq.hide_answer.inc',
      'template' => 'faq-category-hide-answer',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
      ),
    'faq_questions_inline' => array(
      'path' => $path,
      'file' => 'faq.questions_inline.inc',
      'template' => 'faq-questions-inline',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_questions_inline' => array(
      'path' => $path,
      'file' => 'faq.questions_inline.inc',
      'template' => 'faq-category-questions-inline',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
      ),
    'faq_new_page' => array(
      'path' => $path,
      'file' => 'faq.new_page.inc',
      'template' => 'faq-new-page',
      'arguments' => array('data' => NULL),
      ),
    'faq_category_new_page' => array(
      'path' => $path,
      'file' => 'faq.new_page.inc',
      'template' => 'faq-category-new-page',
      'arguments' => array('data' => NULL, 'display_header' => 0, 'category_display' => NULL, 'term' => NULL, 'class' => NULL, 'parent_term' => NULL),
      ),
  );
}

/**
 * Implementation of hook_block().
 *
 * Create the code of the FAQ page providing three block types: FAQ Categories,
 * Recent FAQs and Random FAQs.
 */
function faq_block($op = 'list', $delta = 0, $edit = array()) {
  static $vocabularies, $terms;

  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('FAQ Categories');
      $blocks[1]['info'] = t('Recent FAQs');
      $blocks[2]['info'] = t('Random FAQs');
      return $blocks;

    case 'view':
      $block = array();
      switch ($delta) {
        case 0:
          // FAQ Categories.
          if (module_exists("taxonomy")) {
            if (!isset($terms)) {
              $terms = array();
              $vocabularies = taxonomy_get_vocabularies('faq');
              $vocab_omit = variable_get('faq_omit_vocabulary', array());
              $vocabularies = array_diff_key($vocabularies, $vocab_omit);
              foreach ($vocabularies as $vocab) {
                foreach (taxonomy_get_tree($vocab->vid) as $term) {
                  if (taxonomy_term_count_nodes($term->tid, 'faq')) {
                    $terms[$term->name] = $term->tid;
                  }
                }
              }
            }
            if (count($terms) > 0) {
              $block['subject'] = t('FAQ Categories');
              $items = array();
              foreach ($terms as $name => $tid) {
                $items[] = l(faq_tt("taxonomy:term:$tid:name", $name), 'faq/'. $tid);
              }
              $list_style = variable_get('faq_category_listing', 'ul');
              $block['content'] = theme('item_list', $items, NULL, $list_style);
            }
          }
          break;


        case 1:
          // Recent FAQs.
          $block['subject'] = t('Recent FAQs');
          $block['content'] = faq_highlights_block(variable_get('faq_block_recent_faq_count', 5));
          break;

        case 2:
          // Random FAQs.
          $block['subject'] = t('Random FAQs');
          $block['content'] = faq_random_highlights_block(variable_get('faq_block_random_faq_count', 5));
          break;

      } // End switch($delta).

      return $block;


    case 'configure':
      switch ($delta) {
        case 0:
          return;

        case 1:
          // Recent FAQs.
          $form['faq_block_recent_faq_count'] = array(
            '#type' => 'textfield',
            '#title' => t('Number of FAQs to show'),
            '#description' => t("This controls the number of FAQs that appear in the 'Recent FAQs' block"),
            '#default_value' => variable_get('faq_block_recent_faq_count', 5),
          );
          break;

        case 2:
          // Random FAQs.
          $form['faq_block_random_faq_count'] = array(
            '#type' => 'textfield',
            '#title' => t('Number of FAQs to show'),
            '#description' => t("This controls the number of FAQs that appear in the 'Random FAQs' block"),
            '#default_value' => variable_get('faq_block_random_faq_count', 5),
          );
          break;
      } // End switch($delta).

      return $form;

    case 'save':
      switch ($delta) {
        case 0:
          break;

        case 1:
          variable_set('faq_block_recent_faq_count', $edit['faq_block_recent_faq_count']);
          break;

        case 2:
          variable_set('faq_block_random_faq_count', $edit['faq_block_random_faq_count']);
          break;
      } // End switch($delta).
      return;

  } // End switch($op).

}

/**
 * Create the HTML output for the Recent FAQs block.
 *
 * @param $num
 *   The default value is 5; determines the number of FAQ entries to be shown.
 * @return
 *   The HTML-formatted code displaying the Recent FAQs.
 */
function faq_highlights_block($num = 5) {

  $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type='faq' AND n.status = 1 ORDER BY n.created DESC", "n", "nid"), 0, $num);

  $items = array();
  while ($row = db_fetch_object($result)) {
    $node = node_load(array('nid' => $row->nid));
    $node = node_prepare($node);
    if (node_access("view", $node)) {
      $items[] = l($node->question, 'node/'. $node->nid);
    }
  }
  $list_style = variable_get('faq_question_listing', 'ul');
  $output = theme('item_list', $items, NULL, $list_style);
  $output .= l(t('All FAQs'), 'faq');

  return $output;
}

/**
 * Create the HTML output for the Random FAQs block.
 *
 * @param $num
 *   The default value is 5; determines the number of FAQ entries to be shown.
 * @return
 *   The HTML-formatted code displaying the Random FAQs.
 */
function faq_random_highlights_block($num = 5) {

  $result = db_query_range(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.type='faq' AND n.status = 1 ORDER BY RAND()", "n", "nid"), 0, $num);

  $items = array();
  while ($row = db_fetch_object($result)) {
    $node = node_load(array('nid' => $row->nid));
    $node = node_prepare($node);
    if (node_access("view", $node)) {
      $items[] = l($node->question, 'node/'. $node->nid);
    }
  }
  $list_style = variable_get('faq_question_listing', 'ul');
  $output = theme('item_list', $items, NULL, $list_style);
  $output .= l(t('All FAQs'), 'faq');

  return $output;
}

/**
 * Return a HTML formatted list of terms indented according to the term depth.
 *
 * @param $vid
 *   Vocabulary id.
 * @param $tid
 *   Term id.
 * @return
 *   Return a HTML formatted list of terms indented according to the term depth.
 */
function _get_indented_faq_terms($vid, $tid) {

  $display_faq_count = variable_get('faq_count', FALSE);
  $hide_child_terms = variable_get('faq_hide_child_terms', FALSE);

  $items = array();
  $tree = taxonomy_get_tree($vid, $tid, -1, 1);

  foreach ($tree as $term) {

    $tree_count = taxonomy_term_count_nodes($term->tid, 'faq');

    if ($tree_count) {
      // Get taxonomy image.
      $term_image = '';
      if (module_exists('taxonomy_image')) {
        $term_image = taxonomy_image_display($term->tid, array('class' => 'faq-tax-image'));
      }

      // Get term description.
      $desc = '';
      if (!empty($term->description)) {
        $desc = '<div class="faq-qa-description"><p>';
        $desc .= check_markup(faq_tt("taxonomy:term:$term->tid:description", $term->description)) ."</p></div>";
      }

      // See if this term has any nodes itself, should it be a link?
      $result = db_query(db_rewrite_sql("SELECT COUNT(n.nid) AS c FROM {term_node} tn INNER JOIN {node} n ON (n.nid = tn.nid AND n.vid = tn.vid) WHERE n.status = 1 AND n.type = 'faq' AND tn.tid = '%d' ", "n", "nid"), $term->tid);
      $term_node_count = db_fetch_object($result);

      if ($term_node_count->c > 0) {
        $path = "faq/$term->tid";

        if (!drupal_lookup_path('alias', arg(0) .'/'. $term->tid) && module_exists('pathauto')) {
          $placeholders = pathauto_get_placeholders('taxonomy', $term);
          $path = pathauto_create_alias('faq', 'insert', $placeholders, arg(0) .'/'. $term->tid, $term->tid);
        }

        if ($display_faq_count) {
          $count = $term_node_count->c;
          if ($hide_child_terms) {
            $count = $tree_count;
          }
          $cur_item = $term_image . l(faq_tt("taxonomy:term:$term->tid:name", $term->name), $path) ." ($count) ". $desc;
        }
        else {
          $cur_item = $term_image . l(faq_tt("taxonomy:term:$term->tid:name", $term->name), $path) . $desc;
        }
      }
      else {
        $cur_item = $term_image . check_plain(faq_tt("taxonomy:term:$term->tid:name", $term->name)) . $desc;
      }
      $cur_item .= '<div class="clear-block"></div>';

      $term_items = array();
      if (!$hide_child_terms) {
        $term_items = _get_indented_faq_terms($vid, $term->tid);
      }
      $items[] = array("data" => $cur_item, "children" => $term_items);

    }
  }

  return $items;
}

/**
 * Get a list of terms associated with the FAQ nodes.
 *
 * @return
 *   Return the HTML-formatted content.
 */
function faq_get_terms() {
  $items = array();
  $vocabularies = taxonomy_get_vocabularies('faq');
  $vocab_omit = variable_get('faq_omit_vocabulary', array());
  $vocabularies = array_diff_key($vocabularies, $vocab_omit);
  foreach ($vocabularies as $vid => $vobj) {
    $vocab_items = _get_indented_faq_terms($vid, 0);
    $items = array_merge($items, $vocab_items);
  }
  return theme('item_list', $items);
}

/**
 * Format the output for the faq_site_map() function.
 *
 * @return
 *   Return a list of FAQ categories if categorization is enabled, otherwise
 *   return a list of faq nodes.
 */
function faq_get_faq_list() {
  // Return list of vocab terms if categories are configured.
  $use_categories = variable_get('faq_use_categories', FALSE);
  if ($use_categories) {
    return faq_get_terms();
  }

  // Otherwise return list of weighted FAQ nodes.
  $items = array();
  $default_sorting = variable_get('faq_default_sorting', 'DESC');
  $default_weight = 0;
  if ($default_sorting != 'DESC') {
    $default_weight = 1000000;
    $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON w.nid = n.nid WHERE n.type='faq' AND n.status = 1 AND (w.tid = 0 OR w.tid IS NULL) ORDER BY weight, n.sticky DESC, n.created ASC", "n", "nid"), $default_weight);
  }
  else {
    $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n LEFT JOIN {faq_weights} w ON w.nid = n.nid WHERE n.type='faq' AND n.status = 1 AND (w.tid = 0 OR w.tid IS NULL) ORDER BY weight, n.sticky DESC, n.created DESC", "n", "nid"), $default_weight);
  }
  while ($row = db_fetch_object($result)) {
    $node = node_load($row->nid);
    if (node_access("view", $node)) {
      $items[] = l($node->question, "node/$node->nid");
    }
  }

  return theme('item_list', $items);
}

/**
 * Implementation of hook_site_map().
 *
 * Not needed by the latest site_map module as it implements a _site_map_faq()
 * function itself.  Leaving this code here for now in case things change again.
 *
 * Create a sitemap, by showing all the FAQ entries list - categorized or not -
 * using faq_get_faq_list() function.
 * @return
 *   Return a list of FAQ categories if categorization is enabled, otherwise
 *   return a list of faq nodes.
 */
/*
function faq_site_map() {
  $title = variable_get('faq_title', 'Frequently Asked Questions');
  $output = faq_get_faq_list();
  return theme('box', $title, $output);
}
 */

/**
 * Implementation of hook_link_alter().
 *
 * Change the term links on a node to point at the appropriate faq page.
 */
function faq_link_alter(&$links, $node) {
  static $vocabularies;

  if ($node->type != 'faq' || !variable_get('faq_use_categories', FALSE) || !module_exists("taxonomy") || !variable_get('faq_enable_term_links', 1)) {
    return;
  }
  if (!isset($vocabularies)) {
    $vocabularies = taxonomy_get_vocabularies('faq');
    $vocab_omit = variable_get('faq_omit_vocabulary', array());
    $vocabularies = array_diff_key($vocabularies, $vocab_omit);
  }
  foreach ($links as $module => $link) {
    if (strpos($module, 'taxonomy_term') !== FALSE) {
      // Link back to the faq and not the taxonomy term page. We'll only
      // do this if the taxonomy term in question belongs to faq vocab.
      $tid = str_replace('taxonomy/term/', '', $link['href']);
      $term = taxonomy_get_term($tid);
      if (!is_object($term)) return;
      foreach ($vocabularies as $vid => $vobj) {
        if ($term->vid == $vid && taxonomy_term_count_nodes($term->tid, 'faq')) {
          $links[$module]['href'] = str_replace('taxonomy/term', 'faq', $link['href']);
          break;
        }
      }
    }
  }
}

if (!function_exists('array_diff_key')) {
  function array_diff_key() {
    $arrs = func_get_args();
    $result = array_shift($arrs);
    foreach ($arrs as $array) {
      foreach ($result as $key => $v) {
        if (array_key_exists($key, $array)) {
          unset($result[$key]);
        }
      }
    }
    return $result;
  }
}

/**
 * Implementation of hook_term_path().
 */
function faq_term_path($term) {
  return 'faq/'. $term->tid;
}

/**
 * Helper function to setup the faq question.
 *
 * @param &$data
 *   Array reference to store display data in.
 * @param $node
 *   The node object.
 * @param $path
 *   The path/url which the question should link to if links are disabled.
 * @param $anchor
 *   Link anchor to use in question links; for "questions top" layout.
 */
function faq_view_question(&$data, $node, $path = NULL, $anchor = NULL) {
  $disable_node_links = variable_get('faq_disable_node_links', FALSE);
  $question = '';

  // Don't link to faq node, instead provide no link, or link to current page.
  if ($disable_node_links) {
    if (empty($path) && empty($anchor)) {
      $question = $node->title;
    }
    elseif (empty($path)) {
      $question = l("", "", array("attributes" => array("name" => "$anchor", "id" => "$anchor"))) . $node->title;
    }
    else {
      $question = l($node->title, $path);
    }
  }

  // Link to faq node.
  else {
    if (empty($anchor)) {
      $question = l($node->title, "node/$node->nid");
    }
    else {
      $question = l($node->title, "node/$node->nid", array("attributes" => array("name" => "$anchor", "id" => "$anchor")));
    }
  }
  $data['question'] = $question;
}

/**
 * Helper function to setup the faq answer.
 *
 * @param &$data
 *   Array reference to store display data in.
 * @param $node
 *   The node object.
 * @param $back_to_top
 *   An array containing the "back to top" link.
 * @param $teaser
 *   Whether or not to use teasers.
 * @param $links
 *   Whether or not to show node links.
 */
function faq_view_answer(&$data, $node, $back_to_top, $teaser, $links) {

  // Build the faq node content and invoke other modules' links, etc, functions.
  $node = (object)$node;
  $node = node_build_content($node, $teaser, 0);
  if ($links) {
    $node->links = module_invoke_all('link', 'node', $node, $teaser);
    foreach (module_implements('link_alter') as $module) {
      $function = $module .'_link_alter';
      $function($node->links, $node);
    }
  }

  // Add "edit answer" link if they have the ocrrect permissions.
  if (node_access('update', $node)) {
    $node->links['faq_edit_link'] = array(
      'title' => t('Edit answer'),
      'href' => "node/$node->nid/edit",
      'attributes' => array('title' => t('Edit answer')),
    );
  }

  // Add "back to top" link.
  $node->links['faq_back_to_top'] = $back_to_top;

  $content = drupal_render($node->content);
  node_invoke_nodeapi($node, 'alter', $teaser, 0);

  // Unset unused $node text so that a bad theme can not open a security hole.
  // $node->body = NULL;
  // $node->teaser = NULL;

  $data['body'] = $content;
  if ($links) {
    $data['links'] = theme('links', $node->links);
  }
}

/**
 * Helper function to setup the "back to top" link.
 *
 * @param $path
 *   The path/url where the "back to top" link should bring the user too.  This
 *   could be the 'faq' page or one of the categorized faq pages, e.g 'faq/123'
 *   where 123 is the tid.
 * @return
 *   An array containing the "back to top" link.
 */
function faq_init_back_to_top($path) {
  $back_to_top = array();
  $back_to_top_text = variable_get('faq_back_to_top', 'Back to Top');
  if (!empty($back_to_top_text)) {
    $back_to_top = array(
      'title' => $back_to_top_text,
      'href' => $path,
      'attributes' => array('title' => t('Go back to the top of the page.')),
      'fragment' => 'top',
      'html' => TRUE,
    );
  }

  return $back_to_top;
}

/**
 * Helper function for retrieving the sub-categories faqs.
 *
 * @param $term
 *   The category / term to display FAQs for.
 * @param $theme_function
 *   Theme function to use to format the Q/A layout for sub-categories.
 * @param $default_weight
 *   Is 0 for $default_sorting = DESC; is 1000000 for $default_sorting = ASC.
 * @param $default_sorting
 *   If 'DESC', nodes are sorted by creation date descending; if 'ASC', nodes
 *   are sorted by creation date ascending.
 * @param $category_display
 *   The layout of categories which should be used.
 * @param $class
 *   CSS class which the HTML div will be using. A special class name is
 *   required in order to hide and questions / answers.
 * @param $parent_term
 *   The original, top-level, term we're displaying FAQs for.
 */
function faq_get_child_categories_faqs($term, $theme_function, $default_weight, $default_sorting, $category_display, $class, $parent_term = NULL) {
  $output = array();

  $list = taxonomy_get_children($term->tid);

  foreach ($list as $tid => $child_term) {
    $child_term->depth = $term->depth + 1;

    if (taxonomy_term_count_nodes($child_term->tid, 'faq')) {
      if ($default_sorting == 'DESC') {
        $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON w.tid = tn.tid AND n.nid = w.nid WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight, n.sticky DESC, n.created DESC", "n", "nid"), $default_weight, $child_term->tid);
      }
      else {
        $result = db_query(db_rewrite_sql("SELECT n.nid, if((w.weight IS NULL), %d, w.weight) as weight, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON (n.nid = tn.nid AND n.vid = tn.vid) LEFT JOIN {faq_weights} w ON w.tid = tn.tid AND n.nid = w.nid WHERE n.type='faq' AND n.status = 1 AND tn.tid = '%d' ORDER BY weight, n.sticky DESC, n.created ASC", "n", "nid"), $default_weight, $child_term->tid);
      }

      $data = array();
      while ($row = db_fetch_object($result)) {
        $node = node_load($row->nid);
        if (node_access("view", $node)) {
          $data[] = $node;
        }
      }
      $output[] = theme($theme_function, $data, 1, $category_display, $child_term, $class, $parent_term);
    }
  }

  return $output;
}

/**
 * Helper function to setup the list of sub-categories for the header.
 *
 * @param $term
 *   The term to setup the list of child terms for.
 * @return
 *   An array of sub-categories.
 */
function faq_view_child_category_headers($term) {

  $child_categories = array();
  $list = taxonomy_get_children($term->tid);

  foreach ($list as $tid => $child_term) {
    $term_node_count = taxonomy_term_count_nodes($child_term->tid, 'faq');
    if ($term_node_count) {

      // Get taxonomy image.
      $term_image = '';
      if (module_exists('taxonomy_image')) {
        $term_image = taxonomy_image_display($child_term->tid, array('class' => 'faq-tax-image'));
      }

      $term_vars['link'] = l(faq_tt("taxonomy:term:$child_term->tid:name", $child_term->name), "faq/$child_term->tid");
      $term_vars['description'] = check_markup(faq_tt("taxonomy:term:$child_term->tid:description", $child_term->description));
      $term_vars['count'] = $term_node_count;
      $term_vars['term_image'] = $term_image;
      $child_categories[] = $term_vars;
    }
  }

  return $child_categories;
}

/**
 * Implementation of hook_pathauto().
 */
function faq_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'faq';
      $settings['token_type'] = 'taxonomy';
      $settings['groupheader'] = t('FAQ category path settings');
      $settings['patterndescr'] = t('Default path pattern (applies to all FAQ categories with blank patterns below)');
      $settings['patterndefault'] = t('faq/[catpath-raw]');

      $patterns = token_get_list('taxonomy');
      foreach ($patterns as $type => $pattern_set) {
        if ($type != 'global') {
          foreach ($pattern_set as $pattern => $description) {
            $settings['placeholders']['['. $pattern .']'] = $description;
          }
        }
      }
      return (object) $settings;
    default:
      break;
  }
}

/**
 * Function to set up the FAQ breadcrumbs for a given taxonomy term.
 *
 * @param $term
 *   The taxonomy term object.
 */
function faq_set_breadcrumb($term = NULL) {
  $breadcrumb = array();

  if (module_exists("taxonomy") && $term) {
    $breadcrumb[] = l(faq_tt("taxonomy:term:$term->tid:name", $term->name), 'faq/'. $term->tid);
    while ($parents = taxonomy_get_parents($term->tid)) {
      $term = array_shift($parents);
      $breadcrumb[] = l(faq_tt("taxonomy:term:$term->tid:name", $term->name), 'faq/'. $term->tid);
    }
  }
  $breadcrumb[] = l(variable_get('faq_title', 'Frequently Asked Questions'), 'faq');
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb = array_reverse($breadcrumb);
  return drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implementation of template_preprocess_page().
 *
 * Override the breadcrumbs for faq nodes.
 */
function faq_preprocess_page(&$variables) {
  if (!empty($variables['node']) && isset($variables['node']->type) && $variables['node']->type == 'faq' && module_exists("taxonomy") && !empty($variables['node']->taxonomy)) {
    foreach ($variables['node']->taxonomy as $term) {
      continue;
    }
    $variables['breadcrumb'] = theme('breadcrumb', faq_set_breadcrumb($term));
  }
}

/**
 * Helper function for when i18ntaxonomy module is not installed.
 */
function faq_tt($string_id, $default, $language = NULL) {
  return function_exists('tt') ? tt($string_id, $default, $language) : $default;
}
